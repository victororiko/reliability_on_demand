{
  "$schema": "https://schema.management.azure.com/schemas/2015-01-01/deploymentTemplate.json#",
  "contentVersion": "1.0.0.0",
  "parameters": {
    "DeploymentInstanceName": {
      "type": "string",
      "minLength": 6,
      "maxLength": 24,
      "defaultValue": "[resourceGroup().name]",
      "metadata": {
        "description": "A prefix name that will be applied to all resources to help group and idenitfy them."
      }
    },
    "EgressPipelineName": {
      "type": "string",
      "minLength": 5,
      "maxLength": 128,
      "defaultValue": "SQLizerReload",
      "metadata": {
        "description": "Unique name for the pipeline.  This will clobber existing pipelines with the same name."
      }
    },
    "Manifest": {
      "type": "string",
      "defaultValue": "",
      "metadata": {
        "description": "The SQLizer manifest xml contents for the job."
      }
    },
    "TriggerTime": {
      "type": "string",
      "defaultValue": "2020-04-30T12:30:00Z",
      "metadata": {
        "description": "The time at which the pipeline should start running"
      }
    },
    "TriggerFrequency": {
      "type": "string",
      "defaultValue": "Day",
      "allowedValues": [
        "Hour",
        "Day",
        "Week",
        "Month",
        "None"
      ],
      "metadata": {
        "description": "How often the manifest file should run"
      }
    },
    "Folder": {
      "type": "string",
      "defaultValue": "CosmosEgress/PROD",
      "metadata": {
        "description": "Organizing folder for the pipeline."
      }
    },
    "StreamSetLocation": {
      "type": "string",
      "defaultValue": "",
      "metadata": {
        "description": "Optional.  Path to the cosmos stream go be egressed.  Useful if the pipeline checks for stream existance or stream updates before executing."
      }
    },
    "LoadType": {
      "type": "string",
      "defaultValue": "DateAligned",
      "allowedValues": [
        "DateAligned",
        "Merge",
        "Reload"
      ],
      "metadata": {
        "description": "Optional.  LoadType from the manifest.  Useful if the pipeline checks for stream existance or stream updates before exeucting by indicating how the stream is egressed."
      }
    },
    "OwnerAlias": {
      "type": "string",
      "defaultValue": "",
      "metadata": {
        "description": "Optional.  Owner alias for the pipeline.  Can be used for annotations and alert activities in the pipeline."
      }
    },
    "NotificationEmails": {
      "type": "string",
      "defaultValue": "",
      "metadata": {
        "description": "Optional.  LoadType from the manifest.  Can be used for annotations and alert activities in the pipeline."
      }
    },
    "LogWorkspace": {
      "defaultValue": "",
      "type": "string",
      "metadata": {
        "description": "Information for the log workspace that contains the logs to be queried"
      }
    }
  },
  "variables": {
    "data_factory_name": "[concat(parameters('DeploymentInstanceName'), 'DataFactory')]",
    "factoryId": "[concat('Microsoft.DataFactory/factories/', variables('data_factory_name'))]",
    "TriggerName": "[concat(parameters('EgressPipelineName'), 'Trigger')]",
    "Empty": [],
    "EmptyStringArray": "[array(string(''))]",
    "EmailReceiverEmails": "[skip(union(variables('Empty'),variables('EmptyStringArray'),split(if(and(empty(parameters('NotificationEmails')),empty(parameters('OwnerAlias'))),string(''),if(empty(parameters('NotificationEmails')),concat(toLower(parameters('OwnerAlias')),'@microsoft.com;'),if(empty(parameters('OwnerAlias')),toLower(parameters('NotificationEmails')),concat(toLower(parameters('OwnerAlias')),'@microsoft.com;',toLower(parameters('NotificationEmails')))))),';')),1)]",
    "EmailReceiverCount": "[if(equals(length(variables('EmailReceiverEmails')), 0), 1, length(variables('EmailReceiverEmails')))]",
    "Annotations": "[concat(if(empty(parameters('OwnerAlias')), variables('Empty'), array(concat('OwnerAlias:',parameters('OwnerAlias')))),if(empty(parameters('StreamSetLocation')), variables('Empty'), array(concat('StreamSetLocation:',parameters('StreamSetLocation')))),if(empty(parameters('Folder')), variables('Empty'), array(concat('Folder:',parameters('Folder')))))]"
  },
  "resources": [
    {
      "name": "[concat(variables('data_factory_name'), '/', parameters('EgressPipelineName'))]",
      "type": "Microsoft.DataFactory/factories/pipelines",
      "apiVersion": "2018-06-01",
      "properties": {
        "mode": "Incremental",
        "activities": [
          {
            "name": "Execute Pipeline1",
            "type": "ExecutePipeline",
            "dependsOn": [],
            "userProperties": [],
            "typeProperties": {
              "pipeline": {
                "referenceName": "SQLizerPipeline with retry",
                "type": "PipelineReference"
              },
              "waitOnCompletion": true,
              "parameters": {
                "Manifest": "[parameters('Manifest')]",
                "JobName": "@pipeline().Pipeline"
              }
            }
          }
        ],
        "parameters": {
        },
        "concurrency": 1,
        "folder": {
          "name": "[parameters('Folder')]"
        },
        "annotations": "[concat(createarray('Primary'), variables('Annotations'))]"
      },
      "dependsOn": [
      ]
    },
    {
      "condition": "[not(equals(parameters('TriggerFrequency'),'None'))]",
      "name": "[concat(variables('data_factory_name'), '/', variables('TriggerName'))]",
      "type": "Microsoft.DataFactory/factories/triggers",
      "apiVersion": "2018-06-01",
      "properties": {
        "mode": "Incremental",
        "annotations": "[variables('Annotations')]",
        "runtimeState": "Started",
        "pipelines": [
          {
            "pipelineReference": {
              "referenceName": "[parameters('EgressPipelineName')]",
              "type": "PipelineReference"
            },
            "parameters": {}
          }
        ],
        "type": "ScheduleTrigger",
        "typeProperties": {
          "recurrence": {
            "frequency": "[parameters('TriggerFrequency')]",
            "interval": 1,
            "startTime": "[parameters('TriggerTime')]",
            "timeZone": "UTC"
          }
        }
      },
      "dependsOn": [
        "[concat(variables('factoryId'), '/pipelines/', parameters('EgressPipelineName'))]"
      ]
    },
    {
      "condition": "[and(not(empty(parameters('NotificationEmails'))),not(empty(parameters('OwnerAlias'))),not(empty(parameters('LogWorkspace'))))]",
      "type": "microsoft.insights/actionGroups",
      "apiVersion": "2019-03-01",
      "name": "[if(empty(variables('EmailReceiverEmails')),'EmptyActionGroup',concat(split(variables('EmailReceiverEmails')[copyIndex('emailreceivers')],'@')[0], ' Action Group'))]",
      "location": "Global",
      "properties": {
        "groupShortName": "[take(split(variables('EmailReceiverEmails')[copyIndex('emailreceivers')],'@')[0], 12)]",
        "enabled": true,
        "emailReceivers": [
          {
            "name": "[concat(split(variables('EmailReceiverEmails')[copyIndex('emailreceivers')],'@')[0],' Email Receiver')]",
            "emailAddress": "[variables('EmailReceiverEmails')[copyIndex('emailreceivers')]]",
            "useCommonAlertSchema": false
          }
        ],
        "smsReceivers": [],
        "webhookReceivers": [],
        "itsmReceivers": [],
        "azureAppPushReceivers": [],
        "automationRunbookReceivers": [],
        "voiceReceivers": [],
        "logicAppReceivers": [],
        "azureFunctionReceivers": []
      },
      "copy":{
        "name": "emailReceivers",
        "count": "[int(variables('EmailReceiverCount'))]"  
      }
    },
    {
      "condition": "[and(not(empty(parameters('NotificationEmails'))),not(empty(parameters('OwnerAlias'))),not(empty(parameters('LogWorkspace'))))]",
      "type": "microsoft.insights/scheduledqueryrules",
      "apiVersion": "2018-04-16",
      "name": "[concat(parameters('EgressPipelineName'), ' Failure Alert Rule')]",
      "location": "westus2",
      "properties": {
        "enabled": "true",
        "source": {
          "query": "[concat('ADFPipelineRun\n| where PipelineName == \"',parameters('EgressPipelineName'),'\"\n| where Annotations contains \"Primary\"\n| where TimeGenerated > ago(1d)\n| where Status == \"Failed\"\n| join kind = inner (\n    ADFActivityRun\n    | where ErrorMessage <> \"\"\n) on $left.RunId == $right.PipelineRunId\n| project PipelineName, Status, FailureType, TimeGenerated, Error=extract(\".*\\\"ErrorMessage\\\":\\\"*(.*?)\\\"\", 1, ErrorMessage), ErrorCode=extract(\".*\\\"errorCode\\\": \\\"*([[:alnum:]]*)\\\",\", 1, Error), ErrorMessage, URL=strcat(\"https://ms-adf.azure.com/monitoring/pipelineruns/\",RunId,\"?factory=\",ResourceId), RunId | extend FullLog=extractjson(\"$.Status.FullLog\",tostring(split(split(ErrorMessage,\"message - \\''\")[1],\"\\''.\")[0])) | project TimeGenerated, PipelineName, Status, Error, DetailedLog=FullLog, ADFExecutionLink=URL')]",
          "authorizedResources": [],
          "dataSourceId": "[parameters('LogWorkspace')]",
          "queryType": "ResultCount"
        },
        "schedule": {
          "frequencyInMinutes": 15,
          "timeWindowInMinutes": 15
        },
        "action": {
          "severity": "4",
          "aznsAction": {
            "copy": [{
              "name": "actionGroup",
              "count": "[int(variables('EmailReceiverCount'))]",
              "input": "[concat(resourceGroup().id,'/providers/microsoft.insights/actiongroups/',split(variables('EmailReceiverEmails')[copyIndex('actionGroup')],'@')[0],' Action Group')]"
            }], 
            "emailSubject": "[concat('Alert ',parameters('EgressPipelineName'),' failure')]"
          },
          "trigger": {
            "thresholdOperator": "GreaterThan",
            "threshold": 0
          },
          "odata.type": "Microsoft.WindowsAzure.Management.Monitoring.Alerts.Models.Microsoft.AppInsights.Nexus.DataContracts.Resources.ScheduledQueryRules.AlertingAction"
        }
      }
    }
  ]
}