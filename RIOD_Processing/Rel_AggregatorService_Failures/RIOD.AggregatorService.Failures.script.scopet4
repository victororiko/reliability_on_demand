<#@ template language="c#" debug="true" hostspecific="true" #>
<#@ import namespace = "VcClient" #>
<#@ import namespace = "System.Collections.Generic" #>
<#@ import namespace = "System.IO" #>
<#@ import namespace = "System.Web" #>
<#@include file="ReadTextFromStream.scopet4" #>
<#@ import namespace = "System" #>
<#@ assembly name= "NEWTONSOFT.JSON.DLL" #>
<#@ import namespace = "Newtonsoft.Json" #>
<#@ import namespace = "Newtonsoft.Json.Linq" #>
<#@include file="ConfigurationHelper.scopet4" #>
<#@include file="DebugOutput.scopet4" #>
<#@include file="SchemaExplorer.scopet4" #>
<#@include file="GetLatestStreamDate.scopet4" #>
<#@include file="SaveTextToStream.scopet4" #>


<#
    var context = Host.GetHostOption("T4Context") as IT4TransformContext;

	string feederJSONFile = @"/shares/asimov.prod.data/PublicPartner/Processed/Reliability/RIOD/Resources/RIODFeeder/FeederOutputs/RIOD.FailureColumns.Static.json"; 
	string inputReliabilityRoot = @"/shares/asimov.prod.data/PublicPartner/Processed/Reliability/RIOD/Streams/";
	string outputFailureAggregateFolder = @"Failures/Aggregated/";
	string inputVerticalToColumn = "appcrash;appcrash_uiv;appcrash_ms;appcrash_ms_uiv;apphang;apphang_ms;apphang_ms_uiv;oscrash;oscrash_ms;criticalservice;criticalservice_ms;livekerneldump;dirtyshutdown;corruption;verifier;watchdog;oom;setup;offlinecrashdump;abs_bugcheck;abs_lpbh;abs_hw;abs_unknown;appcrash_sce1;appcrash_ms_sce1;appcrash_ms_uiv_sce1;apphang_sce1;apphang_ms_sce1;apphang_ms_uiv_sce1;oscrash_sce1;oscrash_ms_sce1;appcrash_sce2;appcrash_ms_sce2;appcrash_ms_uiv_sce2;apphang_sce2;apphang_ms_sce2;apphang_ms_uiv_sce2;oscrash_sce2;oscrash_ms_sce2;appcrash_sce3;appcrash_ms_sce3;appcrash_ms_uiv_sce3;apphang_sce3;apphang_ms_sce3;apphang_ms_uiv_sce3;oscrash_sce3;oscrash_ms_sce3";
    string inputSelectColumns = "ProcessorModel;osArchitecture";
    int inputDayLookBack=14;  
    string outputDeviceFailureFlattenedStreamName = "RIOD.Devices.Failures.Flattened";
	string outputGenericDeviceFailureStreamName= "RIOD.Devices.Failures.Generic";
	string outputExpandedDeviceFailureStreamName= "RIOD.Devices.Failures.Expanded";
	string outputGenericFailureStreamName= "RIOD.Failures.Generic";
	string inputWatsonMarkerFile = @"/shares/asimov.prod.data/PublicPartner/Processed/Reliability/RIOD/Resources/WatsonLatestTime.txt";
	Char[] trimExtraChars = new Char[] { ' ', '*', '.', '[', ']', '{', '}'};
	int inputMinBuild = 22621;
	string inputAbsFailuresInputStream = "/shares/asimov.prod.data/PublicPartner/Staging/Reliability/FailureCurve/Prerequisite/OSAbnormalShutdown.Raw.DeviceFailures.ss";
	string inputAbsBugCheckSelectClause = "(!String.IsNullOrEmpty(FailureName) AND !FailureName.Contains(\"_USER_INITIATED\")) AND (IsBugCheck == true OR !String.IsNullOrEmpty(OSC_BugCheckCodeStr))";
	string inputAbsLPBHSelectClause = "(!String.IsNullOrEmpty(FailureName) AND FailureName.Contains(\"_USER_INITIATED\")) OR (!String.IsNullOrEmpty(OSC_BugCheckCodeStr) AND (OSC_BugCheckCodeStr.Contains(\"0X1C8\") OR OSC_BugCheckCodeStr.Contains(\"0XE2\")) )";
	string inputAbsHWSelectClause = "(!String.IsNullOrEmpty(FailureName) AND FailureName.StartsWith(\"ABS_HW\"))";
		
	string inputWatsonLatestTimeFile = ReadTextFromStream(inputWatsonMarkerFile);
    string watsonLatestTimeString = inputWatsonLatestTimeFile.Trim(trimExtraChars).Split('\n')[0];
	DateTime watsonLatestTime = DateTime.Parse(watsonLatestTimeString);
    string serviceTreeId = "";
	string inputBugsWithFailureHashesStream = @"/shares/asimov.prod.data/PublicPartner/Processed/Reliability/RIOD/Streams/Bugs/BugsWithFailureHashes.ss";

    // Check if we are running under XFlow
    if (context != null)
    {
		outputFailureAggregateFolder = (string)context.GetParameter<string>("_outputFailureAggregateFolder", outputFailureAggregateFolder);
		inputMinBuild = (int)context.GetParameter<int>("_inputMinBuild", inputMinBuild);
		outputGenericFailureStreamName = (string)context.GetParameter<string>("_outputGenericFailureStreamName", outputGenericFailureStreamName);
		feederJSONFile = (string)context.GetParameter<string>("_feederJSONFile", feederJSONFile);
		inputReliabilityRoot = (string)context.GetParameter<string>("_inputReliabilityRoot", inputReliabilityRoot);
		inputVerticalToColumn = (string)context.GetParameter<string>("_inputVerticalToColumn", inputVerticalToColumn);
		inputSelectColumns = (string)context.GetParameter<string>("_inputSelectColumns", inputSelectColumns);
		inputDayLookBack = (int)context.GetParameter<int>("_inputDayLookBack", inputDayLookBack);
		inputAbsFailuresInputStream = (string)context.GetParameter<string>("_inputAbsFailuresInputStream", inputAbsFailuresInputStream);
		inputAbsBugCheckSelectClause = (string)context.GetParameter<string>("_inputAbsBugCheckSelectClause", inputAbsBugCheckSelectClause);
		inputAbsLPBHSelectClause = (string)context.GetParameter<string>("_inputAbsLPBHSelectClause", inputAbsLPBHSelectClause);
		inputAbsHWSelectClause = (string)context.GetParameter<string>("_inputAbsHWSelectClause", inputAbsHWSelectClause);
		serviceTreeId = (string)context.GetParameter<string>("_serviceTreeId", serviceTreeId);
		inputBugsWithFailureHashesStream = (string)context.GetParameter<string>("_inputBugsWithFailureHashesStream", inputBugsWithFailureHashesStream);
	}
	
    string QueryId = string.Empty;
	string StudyIdList = string.Empty;
	string SnapShotType = string.Empty;
	string SnapShotSource = string.Empty;
	string ViewSourcePath = string.Empty;
	string LookBackPeriodInHours = string.Empty;
	string SelectColumns = string.Empty;
	string ApportionJoinColumns = string.Empty;
	string ApportionColumns = string.Empty;
	string KeyColumns = string.Empty;
	string WatsonEventList = string.Empty;
	string Measures = string.Empty;
	string AttributedHits = string.Empty;
	string FilterExpression = string.Empty;
	string Auxiliary_Clause = string.Empty;
	string ImportantProcess_Clause = string.Empty;
	string Scenario_1_Clause = string.Empty;
	string Scenario_2_Clause = string.Empty;
	string Scenario_3_Clause = string.Empty;
	string FailureJoinKeyExpressionCols = string.Empty;
	string IsUIVQuery = string.Empty;
	string configContent = ReadTextFromStream(feederJSONFile);
    Dictionary<string, Dictionary<string,string>> configInfo = new Dictionary<string,Dictionary<string,string>>();

	JArray jsonFeederConfig = JArray.Parse(configContent);
	foreach (JObject content in jsonFeederConfig.Children<JObject>())
    {
		QueryId = content["QueryId"].ToString();
		StudyIdList = content["StudyIdList"].ToString();
		SnapShotType = content["SnapShotType"].ToString();
		SnapShotSource = content["SnapShotSource"].ToString();
		ViewSourcePath = content["ViewSourcePath"].ToString();
		LookBackPeriodInHours = content["LookBackPeriodInHours"].ToString();
		SelectColumns = content["SelectColumns"].ToString();
		ApportionJoinColumns = content["ApportionJoinColumns"].ToString();
		ApportionColumns = content["ApportionColumns"].ToString();
		KeyColumns = content["KeyColumns"].ToString();
		WatsonEventList = content["WatsonEventList"].ToString();
		Measures = content["Measures"].ToString();
		FilterExpression = content["FilterExpression"].ToString();
		Auxiliary_Clause = content["Auxiliary_Clause"].ToString();
		ImportantProcess_Clause = content["ImportantProcess_Clause"].ToString();
		Scenario_1_Clause = content["Scenario_1_Clause"].ToString();
		Scenario_2_Clause = content["Scenario_2_Clause"].ToString();
		Scenario_3_Clause = content["Scenario_3_Clause"].ToString();
		FailureJoinKeyExpressionCols = content["FailureJoinKeyExpressionCols"].ToString();

		Dictionary<string, string> watsonQueryDetails = new Dictionary<string, string> ();

		watsonQueryDetails.Add("QueryId", QueryId);
		watsonQueryDetails.Add("StudyIdList", StudyIdList);
		watsonQueryDetails.Add("SnapShotType", SnapShotType);
		watsonQueryDetails.Add("SnapShotSource", SnapShotSource);
		watsonQueryDetails.Add("ViewSourcePath", ViewSourcePath);
		watsonQueryDetails.Add("LookBackPeriodInHours", LookBackPeriodInHours);
		watsonQueryDetails.Add("SelectColumns", SelectColumns);
		watsonQueryDetails.Add("ApportionJoinColumns", ApportionJoinColumns);
		watsonQueryDetails.Add("ApportionColumns", ApportionColumns);
		watsonQueryDetails.Add("KeyColumns", KeyColumns);
		watsonQueryDetails.Add("WatsonEventList", WatsonEventList);
		watsonQueryDetails.Add("Measures", Measures);
		watsonQueryDetails.Add("FilterExpression", FilterExpression);
		watsonQueryDetails.Add("Auxiliary_Clause", Auxiliary_Clause);
		watsonQueryDetails.Add("ImportantProcess_Clause", ImportantProcess_Clause);
		watsonQueryDetails.Add("Scenario_1_Clause", Scenario_1_Clause);
		watsonQueryDetails.Add("Scenario_2_Clause", Scenario_2_Clause);
		watsonQueryDetails.Add("Scenario_3_Clause", Scenario_3_Clause);
		watsonQueryDetails.Add("FailureJoinKeyExpressionCols", FailureJoinKeyExpressionCols);

		configInfo.Add(QueryId, watsonQueryDetails);
	}
#>

MODULE "shares/asimov.prod.data/Public/Processed/Watson/Modules/1510/WatsonPublic.module" AS m;

USING System.Security.Cryptography; 
// Import Next Generation Privacy annotation module 
// Ref: https://microsoft.sharepoint.com/teams/ngphome/ngpx/execution/Official%20Documents/NGPX%20Technical%20Specifications/Privacy%20Tags%20Taxonomy.docx?web=1 
MODULE @"/shares/asimov.prod.data/AsimovCommonResources/PrivacyAnnotation/PrivacyAnnotation.module"; 
USING Privacy; 

#DECLARE runDate DateTime = DateTime.Parse("<#=watsonLatestTime#>");
#DECLARE serviceTreeId string = "<#=serviceTreeId#>";

BugsWithFailureHashesView = SSTREAM @"<#=inputBugsWithFailureHashesStream#>";

<# 
    int i=0;
    string QueryIdStr = string.Empty;
    Dictionary<string, string> WatsonQueryDetailsOut = new Dictionary<string, string>();
    int idxNumFailureExprCols = 0;
	int numFailureExprCols = 0;
	int columnLen = 0;
	int MaxScenarios = 3;
	
	foreach(var ele in configInfo)
	{
		QueryId = (string)ele.Key;
		WatsonQueryDetailsOut = new Dictionary<string, string>();
		WatsonQueryDetailsOut = ele.Value;
		SnapShotType = WatsonQueryDetailsOut["SnapShotType"].Trim(trimExtraChars);
		SnapShotSource = WatsonQueryDetailsOut["SnapShotSource"].Trim(trimExtraChars);
		ViewSourcePath = WatsonQueryDetailsOut["ViewSourcePath"].Trim(trimExtraChars);
		LookBackPeriodInHours = WatsonQueryDetailsOut["LookBackPeriodInHours"].Trim(trimExtraChars); 
		SelectColumns = WatsonQueryDetailsOut["SelectColumns"].Trim(trimExtraChars); 
		ApportionColumns = WatsonQueryDetailsOut["ApportionColumns"].Trim(trimExtraChars);
		ApportionJoinColumns = WatsonQueryDetailsOut["ApportionJoinColumns"].Trim(trimExtraChars);
		WatsonEventList = WatsonQueryDetailsOut["WatsonEventList"].Trim(trimExtraChars);
		KeyColumns = WatsonQueryDetailsOut["KeyColumns"].Trim(trimExtraChars);
		Measures = WatsonQueryDetailsOut["Measures"].Trim(trimExtraChars);
		FilterExpression = WatsonQueryDetailsOut["FilterExpression"].Trim(trimExtraChars);
		Auxiliary_Clause = WatsonQueryDetailsOut["Auxiliary_Clause"].Trim(trimExtraChars);
		ImportantProcess_Clause = WatsonQueryDetailsOut["ImportantProcess_Clause"].Trim(trimExtraChars);
		Scenario_1_Clause = WatsonQueryDetailsOut["Scenario_1_Clause"].Trim(trimExtraChars);
		Scenario_2_Clause = WatsonQueryDetailsOut["Scenario_2_Clause"].Trim(trimExtraChars);
		Scenario_3_Clause = WatsonQueryDetailsOut["Scenario_3_Clause"].Trim(trimExtraChars);
		FailureJoinKeyExpressionCols = WatsonQueryDetailsOut["FailureJoinKeyExpressionCols"].Trim(trimExtraChars);
		IsUIVQuery = ((Auxiliary_Clause.Contains("watsonUserImpactVector"))?"1":"0");

		if(!String.IsNullOrEmpty(KeyColumns))
		{
#>
		     RIODDeviceFailuresRaw_<#=i#> = m.WatsonSnapshotAggView
                (
                    serviceTreeId = @serviceTreeId
					,apportionPartitionCount = 2500
					,quarantinedDevices = new MAP<string, string>{{"true", "100"}}
					,numHours = 24 * <#=inputDayLookBack#>
                    ,snapshotType = "<#=SnapShotType#>"
<#
             if(!String.IsNullOrEmpty(SnapShotSource))
			 {
#>
                    ,snapshotSource = "<#=SnapShotSource#>"
<#
			 }
#>
                    ,measures = new ARRAY<string>  { <#=Measures#> }
                    ,roundApportionedMachineCount = false
                    ,watsonEventNameList = new ARRAY<string>  { <#=WatsonEventList#> }
<#
      if(!String.IsNullOrEmpty(Auxiliary_Clause))
	  {
#>
                    ,filterExpression =  "( (<#=FilterExpression#>) AND ( (<#=Auxiliary_Clause#>) || (<#=ImportantProcess_Clause#>) || (<#=Scenario_1_Clause#>) ) )"
<#
      }
	  else
	  {
#>
                    ,filterExpression =  "(<#=FilterExpression#>)"
<#
      }
#>
                    ,selectColumns = new ARRAY<string> {
                          <#=SelectColumns#>
                    }
                    ,keyColumns = new ARRAY<string> {
                        <#=KeyColumns#>
                    }
<#
             if(!String.IsNullOrEmpty(ApportionJoinColumns))
			 {
#>
                    ,apportionJoinColumns = new ARRAY<string> { 
                        <#=ApportionJoinColumns#>
                    }
<#
			 }
             if(!String.IsNullOrEmpty(ApportionColumns))
			 {
#>
                    ,apportionedColumns = new ARRAY<string> { <#=ApportionColumns#> }
<#
			 }
#>
             );

             RIODDeviceFailuresGeneric_<#=i#> = 
                                SELECT <#=QueryId#> AS QueryId,
                                       DeviceId,
									   (
<#
					         numFailureExprCols = FailureJoinKeyExpressionCols.Split(';').Count();
                             idxNumFailureExprCols = 0;
							 foreach (var failureJoinKeyColumnExpr in FailureJoinKeyExpressionCols.Split(';'))
							 {
                                   string[] failureJoinKeyColumnExprStrings = failureJoinKeyColumnExpr.Split('#');
                                   columnLen = failureJoinKeyColumnExprStrings.Count();
                                   string keyColumnNameStr = (!failureJoinKeyColumnExpr.Contains("#")?failureJoinKeyColumnExprStrings[0]:("\"" + failureJoinKeyColumnExprStrings[columnLen-2].ToString() + "\""));
                                   string keyColumnName = keyColumnNameStr.Replace("\"", "");
#>
                                   <#=keyColumnName#> +
<#
					               if(idxNumFailureExprCols < numFailureExprCols-1)
                                   {
#>
                                       "." + 
<#					   
                                   }
                                   idxNumFailureExprCols++;
							 }
#>
                                   String.Empty) AS FailureJoinKey,
                                   "<CurvePivots><PivotFields>" +
<#
                             if(!string.IsNullOrEmpty(inputSelectColumns))
							 {
							       foreach (var columnExpr in inputSelectColumns.Split(';'))
						            {
										string[] columnExprStrings = columnExpr.Split('#');
										columnLen = columnExprStrings.Count();
										string columnNameStr = (!columnExpr.Contains("#")?columnExprStrings[0]:("\"" + columnExprStrings[columnLen-2].ToString() + "\""));
										string columnName = columnNameStr.Replace("\"", "");
#>
										"<PivotField name=\"" + <#=columnNameStr#> + "\">"+ <#=columnName#> + "</PivotField>" +
<#
                                    }
							 }
#>
									   "</PivotFields></CurvePivots>" AS CustomFields,
									   FailureHelper.GetVerticalFromEvent(watsonEventName2,FailureInfo_FailureBucketId) AS Vertical,
									   FailureInfo_FailureBucketId AS FailureName,
									   FailureInfo_FailureHash AS FailureHash,
									   FailureInfo_ModuleName AS ModuleName,
									   (int)(<#=IsUIVQuery=="1"?1:0#>) AS IsUIVQuery,
<#                           
                             if(!String.IsNullOrEmpty(Auxiliary_Clause))
							 {
#>
									   (<#=Scenario_1_Clause.Replace(@"\","")#>) AS IsScenario_1,
									   (<#=Scenario_2_Clause.Replace(@"\","")#>) AS IsScenario_2,
									   (<#=Scenario_3_Clause.Replace(@"\","")#>) AS IsScenario_3,
									   (<#=ImportantProcess_Clause.Replace(@"\","")#>) AS IsImportantProcess,
<#                           
                             }
                             else
							 {
							      for(int idxScenario=1;idxScenario <= MaxScenarios;idxScenario++)
								  {
#>
									   (bool)false AS IsScenario_<#=idxScenario#>,
<#
                                  }
#>
									   (bool)false AS IsImportantProcess,
<#
                             }
							 if(Measures.Contains("ApportionedHits"))
							 {
#>
									   (double)SUM(ApportionedHits) AS HitCount,
									   (double)SUM(ApportionedMachineCount) AS MachineCount
<#
                             }
					         else
							 { 
#>
									   (double)SUM(AttributedHits) AS HitCount,
									   (double)SUM(0) AS MachineCount                                      
<#
                             }
#>
								FROM RIODDeviceFailuresRaw_<#=i#>
								GROUP BY QueryId,
									   DeviceId,
									   FailureJoinKey,
									   CustomFields,
									   Vertical,
									   ModuleName,
									   FailureName,
									   FailureHash,
									   IsUIVQuery,
									   IsImportantProcess
<#
			 for(int idxScenario=1;idxScenario <= MaxScenarios;idxScenario++)
			 {
#>
									   ,IsScenario_<#=idxScenario#>
<#
             }
#>
                                      ;
<#
             if(i==0)
             {
#>
                   RIODDeviceFailuresGeneric = SELECT *
                                               FROM RIODDeviceFailuresGeneric_<#=i#>;
<#
		     }
		     else
		     {
#>
                   RIODDeviceFailuresGeneric = SELECT *
                                               FROM RIODDeviceFailuresGeneric
                                               UNION 
                                               SELECT *
                                               FROM RIODDeviceFailuresGeneric_<#=i#>; 
<#
             }
             i++;
        }
     }
#>;

ABSStreamView =  SELECT *
                 FROM (SSTREAM @"<#=inputAbsFailuresInputStream#>")
				 WHERE FailureHelper.IsValidInt(OSVersion.Split('.')[2]) AND !String.IsNullOrEmpty(DeviceId)
				 HAVING !String.IsNullOrEmpty(Branch) AND Build >= <#=inputMinBuild#>;

ABSDeviceFailures = 
			SELECT (int)0 AS QueryId,
				   (string)DeviceId AS DeviceId,
				   (DeviceId + "." + Branch + "." + OSVersion) AS FailureJoinKey,
				   String.Empty AS CustomFields,
				   "dirtyshutdown" AS Vertical,
				   (String.IsNullOrEmpty(FailureName)?UnifiedFailureName:FailureName) AS FailureName,
				   (Guid?)((FailureHash == NULL)?UnifiedFailureHash:FailureHash) AS FailureHash,
				   ModuleName,
                   (int)0 AS IsUIVQuery,
				   (bool)false AS IsImportantProcess,
<#
			 for(int idxScenario=1;idxScenario <= MaxScenarios;idxScenario++)
			 {
#>
				   (bool)false AS IsScenario_<#=idxScenario#>,
<#
             }
#>
                   (double)Count AS HitCount,
                   (double)1 AS MachineCount,     //No Apportioning for ABS
				   OSC_BugCheckCodeStr,
				   IsBugCheck
             FROM ABSStreamView AS abs;

ABSDeviceFailures =
            SELECT *,
			        <#=inputAbsBugCheckSelectClause#> AS IsABS_BugCheck,
                    <#=inputAbsLPBHSelectClause#> AS IsABS_LPBH,
                    <#=inputAbsHWSelectClause#> AS IsABS_HW
            FROM ABSDeviceFailures;

ABSDeviceFailures = 
			SELECT QueryId,
				   DeviceId,
				   FailureJoinKey,
				   CustomFields,
				   Vertical,
				   FailureName,
				   FailureHash,
				   ModuleName,
				   IsUIVQuery,
				   IsImportantProcess,
<#
			 for(int idxScenario=1;idxScenario <= MaxScenarios;idxScenario++)
			 {
#>
				   IsScenario_<#=idxScenario#>,
<#
             }
#>
				   HitCount,
		           MachineCount
			FROM ABSDeviceFailures
			UNION ALL
			SELECT QueryId,
				   DeviceId,
				   FailureJoinKey,
				   CustomFields,
				   "abs_bugcheck" AS Vertical,
				   FailureName,
				   FailureHash,
				   ModuleName,
				   IsUIVQuery,
				   IsImportantProcess,
<#
             for(int idxScenario=1;idxScenario <= MaxScenarios;idxScenario++)
             {
#>
				   IsScenario_<#=idxScenario#>,
<#
             }
#>
				   HitCount,
		           MachineCount
			FROM ABSDeviceFailures
			WHERE IsABS_BugCheck == true
			UNION ALL
			SELECT QueryId,
				   DeviceId,
				   FailureJoinKey,
				   CustomFields,
				   "abs_lpbh" AS Vertical,
				   FailureName,
				   FailureHash,
				   ModuleName,
				   IsUIVQuery,
				   IsImportantProcess,
<#
			 for(int idxScenario=1;idxScenario <= MaxScenarios;idxScenario++)
			 {
#>
				   IsScenario_<#=idxScenario#>,
<#
             }
#>
				   HitCount,
		           MachineCount
			FROM ABSDeviceFailures
			WHERE IsABS_LPBH == true
			UNION ALL
			SELECT QueryId,
				   DeviceId,
				   FailureJoinKey,
				   CustomFields,
				   "abs_hw" AS Vertical,
				   FailureName,
				   FailureHash,
				   ModuleName,
				   IsUIVQuery,
				   IsImportantProcess,
<#
			 for(int idxScenario=1;idxScenario <= MaxScenarios;idxScenario++)
			 {
#>
				   IsScenario_<#=idxScenario#>,
<#
             }
#>
				   HitCount,
		           MachineCount
			FROM ABSDeviceFailures
			WHERE IsABS_HW == true
			UNION ALL
			SELECT QueryId,
				   DeviceId,
				   FailureJoinKey,
				   CustomFields,
				   "abs_unknown" AS Vertical,
				   FailureName,
				   FailureHash,
				   ModuleName,
				   IsUIVQuery,
				   IsImportantProcess,
<#
			 for(int idxScenario=1;idxScenario <= MaxScenarios;idxScenario++)
			 {
#>
				   IsScenario_<#=idxScenario#>,
<#
             }
#>
				   HitCount,
		           MachineCount
			FROM ABSDeviceFailures
			WHERE (IsABS_BugCheck == false AND IsABS_LPBH == false AND IsABS_HW == false);

RIODDeviceFailuresGeneric = 
           SELECT *,
		          (Guid)new Guid(MD5.Create().ComputeHash(Encoding.Default.GetBytes(FailureJoinKey))) AS FailureJoinKeyGuid
		   FROM RIODDeviceFailuresGeneric
		   UNION ALL
		   SELECT *,
			      (Guid)new Guid(MD5.Create().ComputeHash(Encoding.Default.GetBytes(FailureJoinKey))) AS FailureJoinKeyGuid
		   FROM ABSDeviceFailures;

RIODGenericFailures = 
           SELECT DISTINCT Vertical,
		                   FailureHash,
		                   FailureName,
				           ModuleName
           FROM RIODDeviceFailuresGeneric;

#DECLARE outputFailuresGeneric = string.Format("{0}/{1}/{2}"+".ss", 
                                                         @"<#=inputReliabilityRoot#>",
                                                         @"<#=outputFailureAggregateFolder#>",
                                                         @"<#=outputGenericFailureStreamName#>");

[Privacy.Asset.NonPersonal]
OUTPUT RIODGenericFailures
TO SSTREAM @outputFailuresGeneric
ROUND ROBIN CLUSTERED INTO 250
WITH STREAMEXPIRY "30";

[SKEWJOIN=(
   SKEW=FROMLEFT,
   REPARTITION=FULLJOIN,
   LEVEL=100,
   MINPARTITIONCOUNT=250,
   PARTITIONCOUNT=5000
)]
RIODDeviceFailuresGenericExpanded = 
            SELECT df.DeviceId,
		           df.Vertical,
				   df.FailureJoinKey,
				   df.FailureJoinKeyGuid,
				   df.FailureHash,
				   df.HitCount,
				   df.MachineCount,
				   df.IsUIVQuery,
				   df.IsImportantProcess,
<#
			 for(int idxScenario=1;idxScenario <= MaxScenarios;idxScenario++)
			 {
#>
				   df.IsScenario_<#=idxScenario#>,
<#
             }
#>
				   bf.ComponentClassification,
				   bf.BugId
            FROM RIODDeviceFailuresGeneric AS df
			LEFT OUTER JOIN BugsWithFailureHashesView AS bf ON df.FailureHash == bf.FailureHash;

#DECLARE outputDeviceFailuresGenericExpanded = string.Format("{0}/{1}/{2}"+".ss", 
                                                         @"<#=inputReliabilityRoot#>",
                                                         @"<#=outputFailureAggregateFolder#>",
                                                         @"<#=outputExpandedDeviceFailureStreamName#>");

// Current stream Device Failures Flattened stream
[Privacy.DataType.ProductAndServicePerformance]
[Privacy.Subject.Device.CommonSchema(Column="DeviceId")]
OUTPUT RIODDeviceFailuresGenericExpanded
TO SSTREAM @outputDeviceFailuresGenericExpanded
CLUSTERED BY FailureJoinKey, DeviceId
SORTED BY MachineCount, HitCount
WITH STREAMEXPIRY "30";

RIODDeviceFailuresGeneric = 
            SELECT DeviceId,
                   Vertical,
                   FailureJoinKey,
                   FailureJoinKeyGuid,
                   FailureHash,
                   ComponentClassification,
                   BugId,
                   MAX(MachineCount) AS MachineCount,
                   SUM(IsUIVQuery == 0?HitCount:0) AS HitCount,
<#
			 for(int idxScenario=1;idxScenario <= MaxScenarios;idxScenario++)
			 {
#>
                  SUM(IsScenario_<#=idxScenario#> == true?HitCount:0) AS HitCount_Sce<#=idxScenario#>,
                  SUM(((IsUIVQuery == 1 || IsImportantProcess == true) && IsScenario_<#=idxScenario#> == true)?HitCount:0) AS HitCount_UIV_Sce<#=idxScenario#>,
<#
			 }
#>
                   SUM((IsUIVQuery == 1 || IsImportantProcess == true)?HitCount:0) AS HitCount_UIV
            FROM RIODDeviceFailuresGenericExpanded
			GROUP BY DeviceId,
                   Vertical,
                   FailureJoinKey,
                   FailureJoinKeyGuid,
                   FailureHash,
                   ComponentClassification,
                   BugId;

#DECLARE outputDeviceFailuresGeneric = string.Format("{0}/{1}/{2}"+".ss", 
                                                         @"<#=inputReliabilityRoot#>",
                                                         @"<#=outputFailureAggregateFolder#>",
                                                         @"<#=outputGenericDeviceFailureStreamName#>");
														 
// Current stream Device Failures Flattened stream
[Privacy.DataType.ProductAndServicePerformance]
[Privacy.Subject.Device.CommonSchema(Column="DeviceId")]
OUTPUT RIODDeviceFailuresGeneric
TO SSTREAM @outputDeviceFailuresGeneric
CLUSTERED BY FailureJoinKey, DeviceId
SORTED BY MachineCount, HitCount
WITH STREAMEXPIRY "30";

RIODDeviceFailuresFlattened =
             SELECT DeviceId,
                    FailureJoinKey,
                    FailureJoinKeyGuid,
                    String.Empty AS CustomFields
<#	
         foreach (var inputVerticalToColMap in inputVerticalToColumn.Split(';'))
         {
		        int verticalColLen = inputVerticalToColMap.Count();
				string[] verticalMapStrings = inputVerticalToColMap.Split(':');
				string verticalName = verticalMapStrings[0];
				if(verticalName.Contains("_ms_uiv_sce"))
				{
 			         char scenarioIndex = verticalName[verticalName.Length - 1];
#>
                       ,SUM((Vertical == "<#=verticalName.Split('_')[0]#>" && !string.IsNullOrEmpty(ComponentClassification) && ComponentClassification == "MS Component")?HitCount_UIV_Sce<#=scenarioIndex#>:0) AS <#=verticalName#>
<#
                }
				else if(verticalName.EndsWith("_ms_uiv"))
				{
#>
                    ,SUM((Vertical == "<#=verticalName.Split('_')[0]#>" && !string.IsNullOrEmpty(ComponentClassification) && ComponentClassification == "MS Component")?HitCount_UIV:0) AS <#=verticalName#>
<#
                }
				else if(verticalName.Contains("_ms_sce"))
				{
 			         char scenarioIndex = verticalName[verticalName.Length - 1];
#>
                       ,SUM((Vertical == "<#=verticalName.Split('_')[0]#>" && !string.IsNullOrEmpty(ComponentClassification) && ComponentClassification == "MS Component")?HitCount_Sce<#=scenarioIndex#>:0) AS <#=verticalName#>
<#
                }
				else if(verticalName.EndsWith("_ms"))
			    {
#>
                    ,SUM((Vertical == "<#=verticalName.Split('_')[0]#>" && !string.IsNullOrEmpty(ComponentClassification) && ComponentClassification == "MS Component")?HitCount:0) AS <#=verticalName#>
<#
                }
				else if(verticalName.Contains("_sce") && !verticalName.Contains("_ms"))
				{
 			         char scenarioIndex = verticalName[verticalName.Length - 1];
#>
                  ,SUM((Vertical == "<#=verticalName.Split('_')[0]#>")?HitCount_Sce<#=scenarioIndex#>:0) AS <#=verticalName#>
<#
                }
				else if(verticalName.EndsWith("_uiv") && !verticalName.Contains("_ms"))
			    {
#>
                    ,SUM((Vertical == "<#=verticalName.Split('_')[0]#>")?HitCount:0) AS <#=verticalName#>
<#
                }
			    else 
				{
#>
                    ,SUM(Vertical == "<#=verticalName#>"?HitCount:0) AS <#=verticalName#>
<#
			   }
         }
#>
             FROM RIODDeviceFailuresGeneric
             GROUP BY DeviceId,
                    FailureJoinKey,
                    FailureJoinKeyGuid,
                    CustomFields;

// Current stream Device Failures Flattened stream
#DECLARE outputFlattenedDeviceFailures = string.Format("{0}/{1}/{2}"+".ss", 
                                                         @"<#=inputReliabilityRoot#>",
                                                         @"<#=outputFailureAggregateFolder#>",
                                                         @"<#=outputDeviceFailureFlattenedStreamName#>");

// Current stream Device Failures Flattened stream into datted stream format
#DECLARE outputFlattenedDeviceFailuresHistory = string.Format("{0}_{1}"+".ss", 
                                                               @outputFlattenedDeviceFailures,
                                                               @runDate.ToString("yyyy-MM-dd_hh_mm_ss"));

[Privacy.DataType.ProductAndServicePerformance]
[Privacy.Subject.Device.CommonSchema(Column="DeviceId")]
OUTPUT RIODDeviceFailuresFlattened
TO SSTREAM @outputFlattenedDeviceFailures
CLUSTERED BY DeviceId, FailureJoinKey, FailureJoinKeyGuid
SORTED BY CustomFields
WITH STREAMEXPIRY "30";

[Privacy.DataType.ProductAndServicePerformance]
[Privacy.Subject.Device.CommonSchema(Column="DeviceId")]
OUTPUT RIODDeviceFailuresFlattened
TO SSTREAM @outputFlattenedDeviceFailuresHistory
CLUSTERED BY DeviceId, FailureJoinKey, FailureJoinKeyGuid
SORTED BY CustomFields
WITH STREAMEXPIRY "30";

#CS

using System;
using System.Collections.Generic;
using System.Xml;

public static class FailureHelper
{
    public static string GetVerticalFromEvent(string watsonEventName,string failureName)
    {
        if(watsonEventName == "criticalprocessfault2")
		{
		   return "criticalservice";
		}
		else if(watsonEventName == "windowsofflinecrash")
		{
		   return "windowsofflinecrash";
		}
		else if(watsonEventName.Contains("hang"))
		{
		   return "apphang";
		}
		else if(watsonEventName == "containercrashdump")
		{
           return "containercrash";
		}
		else if(watsonEventName == "bluescreen" && !string.IsNullOrEmpty(failureName) && (failureName.ToUpper().StartsWith("0X1C8") || failureName.ToUpper().StartsWith("0XE2")) )
		{
           return "abs_lpbh";
		}
		else if(watsonEventName == "bluescreen")
		{
		   return "oscrash";
		}
		else if(watsonEventName == "livekernelevent")
		{
		   return "livekerneldump";
		}
		else if(watsonEventName == "hupbugcheck")
		{
		   return "hupbugcheck";
		}
		else
		{
           return "appcrash";
		}
    }

	public static bool IsValidInt(string intString)
    {
         int Build = 0;

         return Int32.TryParse(intString,out Build);
    }

}

#ENDCS