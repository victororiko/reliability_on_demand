<#@ template language="c#" debug="true" hostspecific="true" #>
<#@ import namespace = "VcClient" #>
<#@ import namespace = "System.Collections.Generic" #>
<#@ import namespace = "System.IO" #>
<#@ import namespace = "System.Web" #>
<#@include file="ReadTextFromStream.scopet4" #>
<#@ import namespace = "System" #>
<#@ assembly name= "NEWTONSOFT.JSON.DLL" #>
<#@ import namespace = "Newtonsoft.Json" #>
<#@ import namespace = "Newtonsoft.Json.Linq" #>
<#@include file="ConfigurationHelper.scopet4" #>
<#@include file="DebugOutput.scopet4" #>
<#@include file="SchemaExplorer.scopet4" #>
<#@include file="GetLatestStreamDate.scopet4" #>
<#@include file="SaveTextToStream.scopet4" #>

/*
This script queries the view API and outputs the daily usage and hourly usage for the last 2 days using the Usage feeder JSON output.
*/

<#
    var context = Host.GetHostOption("T4Context") as IT4TransformContext;
	string feederJSONFile = @"shares/asimov.prod.data/PublicPartner/Processed/Reliability/RIOD/Resources/RIODFeeder/FeederOutputs/RIODUsageColumns.json";
	DateTime today = DateTime.UtcNow;
	int inputDayLookBack = 1;
	int MaxHours = 24;
	int inputDayWatsonLookBack=14;
	string inputReliabilityRoot = @"/shares/asimov.prod.data/PublicPartner/Processed/Reliability/RIOD/Streams/";
	string inputUsageDailyFolder = @"/Usage/Daily/";
	string inputUsageHourlyFolder = @"/Usage/Hourly/";
	string inputUsageHourlyStreamName = @"UsageHourlyData";
	string inputUsageHourlyWithXMLStreamName = @"UsageHourlyDataWithXML";
	string inputUsageDailyStreamName = @"UsageDailyData";
	string inputUsageDailyWithXMLStreamName = @"UsageDailyDataWithXML";
	string expirationStreamCount = "30";
	string inputUsageWatsonCutOffStreamName = @"UsageWatsonCutOffData";
	Char[] trimChars = new Char[] { ' ', '*', '.', '[', ']', '{', '}','"'};
	string nullCheckFilterExpression = "!string.IsNullOrEmpty(DeviceId) && !string.IsNullOrEmpty(OSVersion) && OSVersion != \"Unknown\"";

    // Check if we are running under XFlow
    if (context != null)
    {
       feederJSONFile = (string)context.GetParameter<string>("_feederJSONFile", feederJSONFile);
    }
	
    string AggregateBy = string.Empty;
	string UsagePivotColumns = string.Empty;
	string ViewSourcePath = string.Empty;
	
	string configContent = ReadTextFromStream(feederJSONFile);
    List<Dictionary<string,string>> configInfo = new List<Dictionary<string,string>>();

	JArray jsonFeederConfig = JArray.Parse(configContent);
	foreach (JObject content in jsonFeederConfig.Children<JObject>())
    {
		AggregateBy = content["AggregateBy"].ToString();
		UsagePivotColumns = content["UsagePivotColumns"].ToString();
		ViewSourcePath = content["ViewSourcePath"].ToString();

		Dictionary<string, string> usageQueryDetails = new Dictionary<string, string> ();

		usageQueryDetails.Add("AggregateBy", AggregateBy);
		usageQueryDetails.Add("UsagePivotColumns", UsagePivotColumns);
		usageQueryDetails.Add("ViewSourcePath", ViewSourcePath);

		configInfo.Add(usageQueryDetails);
	}
#>

#DECLARE endDate DateTime = DateTime.Parse("<#=today#>");
#DECLARE minusOneDate DateTime = @endDate.Date.AddDays(-<#=inputDayLookBack#>);
#DECLARE dtStartDate DateTime = @endDate.Date.AddDays(-<#=inputDayWatsonLookBack+1#>);
#DECLARE dtEndDate DateTime = @endDate;
#DECLARE usageDate DateTime;
#DECLARE usageDateHour DateTime;
#DECLARE usageDateId int = 0;
#DECLARE output_UsageHourly_ss string = "";
#DECLARE output_UsageDataDaily_ss string = "";
#DECLARE output_UsageDataDailyWithXML_ss string = "";
#DECLARE output_UsageWatsonCutOffData_ss string="";
#DECLARE output_UsageHourlyWithXML_ss string="";

#SET usageDate = @endDate.AddDays(-<#=inputDayLookBack#>).Date;


#DECLARE output_UsageWatsonLast14Days_ss = string.Format("{0}/{2}/{3}"+"_{1:yyyy}-{1:MM}-{1:dd}.ss", 
                                            @"<#=inputReliabilityRoot#>",  
                                            @dtEndDate, 
                                            @"<#=inputUsageDailyFolder#>",
                                            @"<#=inputUsageWatsonCutOffStreamName#>");

USING System.Security.Cryptography; 
// Import Next Generation Privacy annotation module 
// Ref: https://microsoft.sharepoint.com/teams/ngphome/ngpx/execution/Official%20Documents/NGPX%20Technical%20Specifications/Privacy%20Tags%20Taxonomy.docx?web=1 
MODULE @"/shares/PXSCosmos15.Prod/PXS.DeleteSignal.PROD/PrivacyAnnotation/PrivacyAnnotation.module"; 
USING Privacy;

//-----------------------------------------------
//AppUsage assembly
//-----------------------------------------------
[PIN] REFERENCE @"shares/asimov.prod.data/Public/Resources/Latest/Usage/AppUsage/Microsoft.Telemetry.AppUsage.dll";

// ---------------------------------------------------------------------------------------------------------------------
// Dynamic view assembly
// ---------------------------------------------------------------------------------------------------------------------
[PIN] REFERENCE @"shares/asimov.prod.data/Public/Resources/Latest/Usage/AppUsage/Microsoft.OSG.OneStore.DnA.Cosmos.DynamicViewResolver.dll";

// ---------------------------------------------------------------------------------------------------------------------
// Resource xml file
// ---------------------------------------------------------------------------------------------------------------------
RESOURCE @"shares/asimov.prod.data/Public/Resources/Latest/Usage/DynamicView/AppUsage/Aggregates/AggregatedAppUsageMetricsHourly.xml";

// Gets all last 2 days data from the API
MinusTwoUsageData = VIEW "/shares/asimov.prod.data/Public/Processed/Usage/AppUsage/AggregatedAppUsageMetrics/AggregatedAppUsageMetricsHourly.view"
                        PARAMS
                        (
                            sparseStreamSet = true,
                            startDate = @minusOneDate,
                            endDate = @dtEndDate,
                            DataSource = @"AppInteractivity"
                        );

MinusTwoUsageData = SELECT * 
					FROM MinusTwoUsageData
					WHERE <#=nullCheckFilterExpression#>;

// for each day in the look back
<#  
for(int idxLookBackDay=0;idxLookBackDay<=inputDayLookBack;idxLookBackDay++)
   {
   #>

   #SET usageDate = @endDate.AddDays(-<#=idxLookBackDay#>).Date;
        #SET usageDateId = @usageDate.Year * 10000 + @usageDate.Month * 100 + @usageDate.Day;
		#SET output_UsageDataDaily_ss = string.Format("{0}/{2}/{3}"+"_{1:yyyy}-{1:MM}-{1:dd}.ss", 
                                            @"<#=inputReliabilityRoot#>",  
                                            @usageDate, 
                                            @"<#=inputUsageDailyFolder#>",
                                            @"<#=inputUsageDailyStreamName#>");

		#SET output_UsageDataDailyWithXML_ss = string.Format("{0}/{2}/{3}"+"_{1:yyyy}-{1:MM}-{1:dd}.ss", 
                                            @"<#=inputReliabilityRoot#>",  
                                            @usageDate, 
                                            @"<#=inputUsageDailyFolder#>",
                                            @"<#=inputUsageDailyWithXMLStreamName#>");

   <#
    int i=0;
	Dictionary<string, string> UsageQueryDetailsOut = new Dictionary<string, string>();
	// For each of the query in the feeder file
	foreach(var ele in configInfo)
	{
		UsageQueryDetailsOut = new Dictionary<string, string>();
		UsageQueryDetailsOut = ele;
		ViewSourcePath = UsageQueryDetailsOut["ViewSourcePath"].Trim(trimChars).Replace("\"","");
		AggregateBy = UsageQueryDetailsOut["AggregateBy"].Trim(trimChars).Replace("\"","");
		UsagePivotColumns = UsageQueryDetailsOut["UsagePivotColumns"].Trim(trimChars).Replace("\"","");
		String[] usagePivots = UsagePivotColumns.Split(',');

		// for each of the Usage Pivots columns in a query
		for(int j=0;j<usagePivots.Length;j++)
		{

#>

		MinusTwoUsageData_<#=idxLookBackDay#> = SELECT *,
												(int)(HourId/100) AS DateId
												FROM MinusTwoUsageData;

		MinusTwoUsageData_<#=idxLookBackDay#> = SELECT *
												FROM MinusTwoUsageData_<#=idxLookBackDay#>
												WHERE DateId == @usageDateId;

		// Fetches the required columns from the usage stream
		UsageData_<#=idxLookBackDay#><#=i#><#=j#> = SELECT DeviceId,
								 (long)<#=usagePivots[j]#> AS UsageUnitValue,
								 "<#=usagePivots[j]#>" AS UsageUnitColumn,
								 DeviceClass,
								 "<#=ViewSourcePath#>" AS ViewSourcePath,
								 DailyLastSeenDateTime.Hour AS UsageHour,
								 HourId,
								 string.Concat(
								 <#
								 for(int k=0;k<AggregateBy.Split(',').Length;k++)
								 {
								 if(k!= AggregateBy.Split(',').Length-1)
								 {
								 #>
								 <#=AggregateBy.Split(',')[k]#>,";",
								 <#
								 }
								 else
								 {
								 #>
								 <#=AggregateBy.Split(',')[k]#>
								 <#
								 }
								 #>
								 <#
								 }
								 #>) AS UsageJoinKey,
								 DailyFirstSeenDateTime,
								 DailyLastSeenDateTime,
								 "<#=AggregateBy#>" AS AggregateBy
								 FROM MinusTwoUsageData_<#=idxLookBackDay#>;

		// Adds the Guid for the Aggregate By key
		UsageData_<#=idxLookBackDay#><#=i#><#=j#> = SELECT *,
										(Guid)new Guid(MD5.Create() .ComputeHash(Encoding.Default.GetBytes(UsageJoinKey))) AS UsageJoinGuid
										FROM UsageData_<#=idxLookBackDay#><#=i#><#=j#>
										HAVING UsageJoinGuid != NULL;

		UsageDataDaily_<#=idxLookBackDay#><#=i#><#=j#> = SELECT DeviceId,
										MAX(@usageDate.AddHours(HourId%100)) AS UsageDateMaxHour,
										SUM(UsageUnitValue) AS UsageUnitValue,
										UsageUnitColumn,
										DeviceClass,
										AggregateBy,
										UsageJoinKey,
										UsageJoinGuid,
										MIN(DailyFirstSeenDateTime) AS DailyFirstSeenDateTime,
										MAX(DailyLastSeenDateTime) AS DailyLastSeenDateTime
										FROM UsageData_<#=idxLookBackDay#><#=i#><#=j#>
										GROUP BY DeviceId,
										DeviceClass,
										UsageJoinKey,
										UsageJoinGuid,
										UsageUnitColumn,
										AggregateBy
										;

		UsageDataDaily_<#=idxLookBackDay#><#=i#><#=j#> = SELECT DeviceId,
														UsageDateMaxHour,
														(long)UsageUnitValue AS UsageUnitValue,
														UsageUnitColumn,
														DeviceClass,
														AggregateBy,
														UsageJoinKey,
														(Guid)UsageJoinGuid AS UsageJoinGuid,
														DailyFirstSeenDateTime,
														DailyLastSeenDateTime
									  FROM UsageDataDaily_<#=idxLookBackDay#><#=i#><#=j#>;

		UsageDataHourly_<#=idxLookBackDay#><#=i#><#=j#> = SELECT DeviceId,
										UsageHour,
										SUM(UsageUnitValue) AS UsageUnitValue,
										UsageUnitColumn,
										DeviceClass,
										AggregateBy,
										UsageJoinKey,
										UsageJoinGuid,
										MIN(DailyFirstSeenDateTime) AS DailyFirstSeenDateTime,
										MAX(DailyLastSeenDateTime) AS DailyLastSeenDateTime
										FROM UsageData_<#=idxLookBackDay#><#=i#><#=j#>
										GROUP BY DeviceId,
										DeviceClass,
										UsageJoinKey,
										UsageHour,
										UsageJoinGuid,
										UsageUnitColumn,
										AggregateBy
										;

		UsageDataHourly_<#=idxLookBackDay#><#=i#><#=j#> = SELECT DeviceId,
															UsageHour,
															(long)UsageUnitValue AS UsageUnitValue,
															UsageUnitColumn,
															UsageJoinKey,
															DeviceClass,
															AggregateBy,
															(Guid)UsageJoinGuid AS UsageJoinGuid,
															DailyFirstSeenDateTime,
															DailyLastSeenDateTime
															FROM UsageDataHourly_<#=idxLookBackDay#><#=i#><#=j#>;


<#
             if(i==0 && j==0)
             {
#>
                    UsageDataHourly = SELECT *
                                     FROM UsageDataHourly_<#=idxLookBackDay#><#=i#><#=j#>;

					UsageDataDaily_<#=idxLookBackDay#> = SELECT *
									 FROM UsageDataDaily_<#=idxLookBackDay#><#=i#><#=j#>;

<#
			 }
		     else
		     {
#>
                   UsageDataHourly = SELECT *
                                    FROM UsageDataHourly
                                    UNION 
                                    SELECT *
                                    FROM UsageDataHourly_<#=idxLookBackDay#><#=i#><#=j#>;


			       UsageDataDaily_<#=idxLookBackDay#> = SELECT *
                                    FROM UsageDataDaily_<#=idxLookBackDay#>
                                    UNION 
                                    SELECT *
                                    FROM UsageDataDaily_<#=idxLookBackDay#><#=i#><#=j#>;

<#
		}
  }
  i++;
 }
 #>

 // Individual columns for each usage primary unit columns
 MaxUsageDate = SELECT MAX(DailyLastSeenDateTime) AS UsageDate
									  FROM  UsageDataDaily_<#=idxLookBackDay#>;

 UsageDataDaily_<#=idxLookBackDay#> = SELECT u.*,m.*
									  FROM  UsageDataDaily_<#=idxLookBackDay#> AS u
									  CROSS JOIN MaxUsageDate AS m;

// XML columns for each usage primary unit columns
UsageDataHourlyWithXML = SELECT *,
						string.Concat("<CustomFields><Field name=\"",UsageUnitColumn,"\">",UsageUnitValue,"</Field></CustomFields>") AS UsageUnit
						FROM UsageDataHourly;

UsageDataHourlyWithXML =  SELECT DeviceId,
							UsageHour,
							string.Join("", LIST(UsageUnit).ToArray()) AS UsageUnit,
							UsageJoinKey,
							UsageJoinGuid,
							DailyFirstSeenDateTime,
							DeviceClass,
							AggregateBy,
							DailyLastSeenDateTime
							FROM UsageDataHourlyWithXML
							GROUP BY DeviceId,
							UsageHour,
							UsageJoinKey,
							UsageJoinGuid,
							DailyFirstSeenDateTime,
							DailyLastSeenDateTime,
							DeviceClass,
							AggregateBy;

 UsageDataDailyWithXML_<#=idxLookBackDay#> = SELECT *,
											string.Concat("<CustomFields><Field name=\"",UsageUnitColumn,"\">",UsageUnitValue,"</Field></CustomFields>") AS UsageUnit
											FROM UsageDataDaily_<#=idxLookBackDay#>;


UsageDataDailyWithXML_<#=idxLookBackDay#> = SELECT DeviceId,
										UsageDateMaxHour,
										string.Join("", LIST(UsageUnit).ToArray()) AS UsageUnit,
										UsageJoinKey,
										UsageJoinGuid,
										DailyFirstSeenDateTime,
										DailyLastSeenDateTime,
										DeviceClass,
										AggregateBy
										FROM UsageDataDailyWithXML_<#=idxLookBackDay#>
										GROUP BY DeviceId,
										UsageDateMaxHour,
										UsageJoinKey,
										UsageJoinGuid,
										DailyFirstSeenDateTime,
										DailyLastSeenDateTime,
										DeviceClass,
										AggregateBy;


 [Privacy.DataType.ProductAndServiceUsage]
[Privacy.DataType.ProductAndServicePerformance]
[Privacy.Subject.Device.CommonSchema(Column="DeviceId")]
OUTPUT UsageDataDaily_<#=idxLookBackDay#>
TO SSTREAM @output_UsageDataDaily_ss
CLUSTERED BY DeviceId,UsageJoinKey,UsageJoinGuid
SORTED BY DeviceId,UsageJoinKey,UsageJoinGuid
WITH STREAMEXPIRY @"<#= expirationStreamCount #>";

 [Privacy.DataType.ProductAndServiceUsage]
[Privacy.DataType.ProductAndServicePerformance]
[Privacy.Subject.Device.CommonSchema(Column="DeviceId")]
OUTPUT UsageDataDailyWithXML_<#=idxLookBackDay#>
TO SSTREAM @output_UsageDataDailyWithXML_ss
CLUSTERED BY DeviceId,UsageJoinKey,UsageJoinGuid
SORTED BY DeviceId,UsageJoinKey,UsageJoinGuid
WITH STREAMEXPIRY @"<#= expirationStreamCount #>";

<#
for(int idxHour=0;idxHour < MaxHours;idxHour++)
{
#>

// Individual rows of primary usage columns
UsageDataHourly_<#=idxHour#> = SELECT * 
							   FROM UsageDataHourly
							   WHERE UsageHour == <#=idxHour#>;

#SET usageDateHour = @usageDate.Date.AddHours(<#=idxHour#>);

#SET output_UsageHourly_ss = string.Format("{0}/{2}/{3}"+"_{1:yyyy}-{1:MM}-{1:dd}-{1:HH}.ss", 
                                                                       @"<#=inputReliabilityRoot#>",
                                                                       @usageDateHour,
                                                                       @"<#=inputUsageHourlyFolder#>",
                                                                       @"<#=inputUsageHourlyStreamName#>");

[Privacy.DataType.ProductAndServiceUsage]
[Privacy.DataType.ProductAndServicePerformance]
[Privacy.Subject.Device.CommonSchema(Column="DeviceId")]
OUTPUT UsageDataHourly_<#=idxHour#>
TO SSTREAM @output_UsageHourly_ss
CLUSTERED BY DeviceId,UsageJoinKey,UsageJoinGuid
SORTED BY DeviceId,UsageJoinKey,UsageJoinGuid
WITH STREAMEXPIRY @"<#= expirationStreamCount #>";


// XML of unit usage pivots
UsageDataHourlyWithXML_<#=idxHour#> = SELECT * 
							   FROM UsageDataHourlyWithXML
							   WHERE UsageHour == <#=idxHour#>;

#SET usageDateHour = @usageDate.Date.AddHours(<#=idxHour#>);

#SET output_UsageHourlyWithXML_ss = string.Format("{0}/{2}/{3}"+"_{1:yyyy}-{1:MM}-{1:dd}-{1:HH}.ss", 
                                                                       @"<#=inputReliabilityRoot#>",
                                                                       @usageDateHour,
                                                                       @"<#=inputUsageHourlyFolder#>",
                                                                       @"<#=inputUsageHourlyWithXMLStreamName#>");

[Privacy.DataType.ProductAndServiceUsage]
[Privacy.DataType.ProductAndServicePerformance]
[Privacy.Subject.Device.CommonSchema(Column="DeviceId")]
OUTPUT UsageDataHourlyWithXML_<#=idxHour#>
TO SSTREAM @output_UsageHourlyWithXML_ss
CLUSTERED BY DeviceId,UsageJoinKey,UsageJoinGuid
SORTED BY DeviceId,UsageJoinKey,UsageJoinGuid
WITH STREAMEXPIRY @"<#= expirationStreamCount #>";

 <#
 }
 }
#>;