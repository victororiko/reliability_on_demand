<#@ template language="c#" debug="true" hostspecific="true" #>
<#@ import namespace = "VcClient" #>
<#@ import namespace = "System.Collections.Generic" #>
<#@ import namespace = "System.IO" #>
<#@ import namespace = "System.Web" #>
<#@include file="ReadTextFromStream.scopet4" #>
<#@ import namespace = "System" #>
<#@ assembly name= "NEWTONSOFT.JSON.DLL" #>
<#@ import namespace = "Newtonsoft.Json" #>
<#@ import namespace = "Newtonsoft.Json.Linq" #>
<#@include file="ConfigurationHelper.scopet4" #>
<#@include file="DebugOutput.scopet4" #>
<#@include file="SchemaExplorer.scopet4" #>
<#@include file="GetLatestStreamDate.scopet4" #>
<#@include file="SaveTextToStream.scopet4" #>

/*
This script queries the view API and outputs the daily usage and hourly usage for the last 1 day.
*/

<#
    var context = Host.GetHostOption("T4Context") as IT4TransformContext;
	DateTime today = DateTime.UtcNow;
	int inputDayLookBack = 2;
	int MaxHours = 24;
	int inputDayWatsonLookBack=14;
	string inputReliabilityRoot = @"/shares/asimov.prod.data/PublicPartner/Processed/Reliability/RIOD/Streams/";
	string inputUsageDailyFolder = @"/Usage/Daily/";
	string inputUsageHourlyFolder = @"/Usage/Hourly/";
	string inputUsageHourlyStreamName = @"UsageHourlyData";
	string inputUsageHourlyWithXMLStreamName = @"UsageHourlyDataWithXML";
	string inputUsageDailyStreamName = @"UsageDailyData";
	string inputUsageDailyWithXMLStreamName = @"UsageDailyDataWithXML";
	string expirationStreamCount = "30";
	string inputUsageWatsonCutOffStreamName = @"UsageWatsonCutOffData";
	Char[] trimChars = new Char[] { ' ', '*', '.', '[', ']', '{', '}','"'};
	string nullCheckFilterExpression = "!string.IsNullOrEmpty(DeviceId) && !string.IsNullOrEmpty(OSVersion) && OSVersion != \"Unknown\" && numberOSBuild >= 22000 && DeviceClass == \"Windows.Desktop\"";
	
	// Created two similar Aggregate By cols variable to allow addition of OSVersionFull and OSVersion
	string inputAggregateByCols = "IsTestLab;IsMSFTOwned;IsVirtualDevice;IsDomainJoined;FlightRing;IsFlightingInternal;IsFlightsDisabled;OSBuild;OSBranch;OSVersion;OSVersionFull";
	string inputRawAggregateByCols = "IsTestLab;IsMSFTOwned;IsVirtualDevice;IsDomainJoined;FlightRing;IsFlightingInternal;IsFlightsDisabled;OSBuild;OSBranch;DailyFirstSeenDateTime;DailyLastSeenDateTime";
	
	// Workflow parameter for all predicted usage unit that can be used
	string inputUsageUnitCols = "InteractivityDurationMS;EngagementDurationMS;FocusDurationMS;OutOfFocusDurationMS;ProcessDurationMS;RunDurationMS;SuspendDurationMS;AudioInMS;AudioOutMS;UserActiveDurationMS";

    // Check if we are running under XFlow
    if (context != null)
    {
		inputUsageUnitCols = (string)context.GetParameter<string>("_inputUsageUnitCols", inputUsageUnitCols);
		inputAggregateByCols = (string)context.GetParameter<string>("_inputAggregateByCols", inputAggregateByCols);
		nullCheckFilterExpression = (string)context.GetParameter<string>("_nullCheckFilterExpression", nullCheckFilterExpression);
		inputUsageDailyStreamName = (string)context.GetParameter<string>("_inputUsageDailyStreamName", inputUsageDailyStreamName);
		inputUsageHourlyWithXMLStreamName = (string)context.GetParameter<string>("_inputUsageHourlyWithXMLStreamName", inputUsageHourlyWithXMLStreamName);
		inputRawAggregateByCols = (string)context.GetParameter<string>("_inputRawAggregateByCols", inputRawAggregateByCols);
		inputReliabilityRoot = (string)context.GetParameter<string>("_inputReliabilityRoot", inputReliabilityRoot);
		inputUsageDailyFolder = (string)context.GetParameter<string>("_inputUsageDailyFolder", inputUsageDailyFolder);
		inputUsageHourlyStreamName = (string)context.GetParameter<string>("_inputUsageHourlyStreamName", inputUsageHourlyStreamName);
		inputUsageHourlyWithXMLStreamName = (string)context.GetParameter<string>("_inputUsageHourlyWithXMLStreamName", inputUsageHourlyWithXMLStreamName);
		inputUsageHourlyFolder = (string)context.GetParameter<string>("_inputUsageHourlyFolder", inputUsageHourlyFolder);
		inputUsageDailyStreamName = (string)context.GetParameter<string>("_inputUsageDailyStreamName", inputUsageDailyStreamName);
		inputUsageDailyWithXMLStreamName = (string)context.GetParameter<string>("_inputUsageDailyWithXMLStreamName", inputUsageDailyWithXMLStreamName);
		expirationStreamCount = (string)context.GetParameter<string>("_expirationStreamCount", expirationStreamCount);
		inputUsageWatsonCutOffStreamName = (string)context.GetParameter<string>("_inputUsageWatsonCutOffStreamName", inputUsageWatsonCutOffStreamName);
		inputDayLookBack = (int)context.GetParameter<string>("_inputDayLookBack", inputDayLookBack);
    }
#>

#DECLARE endDate DateTime = DateTime.Parse("<#=today#>");
#DECLARE minusOneDate DateTime = @endDate.Date.AddDays(-<#=inputDayLookBack#>);
#DECLARE dtStartDate DateTime = @endDate.Date.AddDays(-<#=inputDayWatsonLookBack+1#>);
#DECLARE dtEndDate DateTime = @endDate;
#DECLARE usageDate DateTime;
#DECLARE usageDateHour DateTime;
#DECLARE usageDateId int = 0;
#DECLARE output_UsageHourly_ss string = "";
#DECLARE output_UsageDataDaily_ss string = "";
#DECLARE output_UsageDataDailyWithXML_ss string = "";
#DECLARE output_UsageWatsonCutOffData_ss string="";
#DECLARE output_UsageHourlyWithXML_ss string="";

#SET usageDate = @endDate.AddDays(-<#=inputDayLookBack#>).Date;


#DECLARE output_UsageWatsonLast14Days_ss = string.Format("{0}/{2}/{3}"+"_{1:yyyy}-{1:MM}-{1:dd}.ss", 
                                            @"<#=inputReliabilityRoot#>",  
                                            @dtEndDate, 
                                            @"<#=inputUsageDailyFolder#>",
                                            @"<#=inputUsageWatsonCutOffStreamName#>");

USING System.Security.Cryptography; 
// Import Next Generation Privacy annotation module 
// Ref: https://microsoft.sharepoint.com/teams/ngphome/ngpx/execution/Official%20Documents/NGPX%20Technical%20Specifications/Privacy%20Tags%20Taxonomy.docx?web=1 
MODULE @"/shares/PXSCosmos15.Prod/PXS.DeleteSignal.PROD/PrivacyAnnotation/PrivacyAnnotation.module"; 
USING Privacy;

//-----------------------------------------------
//AppUsage assembly
//-----------------------------------------------
[PIN] REFERENCE @"shares/asimov.prod.data/Public/Resources/Latest/Usage/AppUsage/Microsoft.Telemetry.AppUsage.dll";

// ---------------------------------------------------------------------------------------------------------------------
// Dynamic view assembly
// ---------------------------------------------------------------------------------------------------------------------
[PIN] REFERENCE @"shares/asimov.prod.data/Public/Resources/Latest/Usage/AppUsage/Microsoft.OSG.OneStore.DnA.Cosmos.DynamicViewResolver.dll";

// ---------------------------------------------------------------------------------------------------------------------
// Resource xml file
// ---------------------------------------------------------------------------------------------------------------------
RESOURCE @"shares/asimov.prod.data/Public/Resources/Latest/Usage/DynamicView/AppUsage/Aggregates/AggregatedAppUsageMetricsHourly.xml";

// Gets all last 2 days data from the API
AggreateAppUsageMetricHourlyData = VIEW "/shares/asimov.prod.data/Public/Processed/Usage/AppUsage/AggregatedAppUsageMetrics/AggregatedAppUsageMetricsHourly.view"
									PARAMS
									(
										sparseStreamSet = true,
										startDate = @minusOneDate,
										endDate = @dtEndDate,
										DataSource = @"AppInteractivity"
									);

// Filtering out the data for min build and device family
AggreateAppUsageMetricHourlyData = SELECT *,
										OSVersion AS OSVersionFull,
										(OSVersion.Split('.').Length>3? (OSVersion.Split('.')[0]+"."+OSVersion.Split('.')[1]+"."+OSVersion.Split('.')[2]+"."+OSVersion.Split('.')[3] ): "") AS OSVersionOnly,
									   HelperRoutine.ParseString(OSBuild) AS numberOSBuild
									   FROM AggreateAppUsageMetricHourlyData
									   HAVING <#=nullCheckFilterExpression#>
									   ;

// for each day in the look back
<#  
for(int idxLookBackDay=0;idxLookBackDay<=inputDayLookBack;idxLookBackDay++)
{
#>

		#SET usageDate = @endDate.AddDays(-<#=idxLookBackDay#>).Date;
        #SET usageDateId = @usageDate.Year * 10000 + @usageDate.Month * 100 + @usageDate.Day;
		#SET output_UsageDataDaily_ss = string.Format("{0}/{2}/{3}"+"_{1:yyyy}-{1:MM}-{1:dd}.ss", 
                                            @"<#=inputReliabilityRoot#>",  
                                            @usageDate, 
                                            @"<#=inputUsageDailyFolder#>",
                                            @"<#=inputUsageDailyStreamName#>");

		#SET output_UsageDataDailyWithXML_ss = string.Format("{0}/{2}/{3}"+"_{1:yyyy}-{1:MM}-{1:dd}.ss", 
                                            @"<#=inputReliabilityRoot#>",  
                                            @usageDate, 
                                            @"<#=inputUsageDailyFolder#>",
                                            @"<#=inputUsageDailyWithXMLStreamName#>");

		AggreateAppUsageMetricHourlyData_<#=idxLookBackDay#> = SELECT *,
												(int)(HourId/100) AS DateId,
												DailyLastSeenDateTime.Hour AS UsageHour
												FROM AggreateAppUsageMetricHourlyData;

		AggreateAppUsageMetricHourlyData_<#=idxLookBackDay#> = SELECT *
																FROM AggreateAppUsageMetricHourlyData_<#=idxLookBackDay#>
																WHERE DateId == @usageDateId;

		// Renaming the OSVersion issue
		AggreateAppUsageMetricHourlyData_<#=idxLookBackDay#> = SELECT DeviceId,
																<#
																 for(int unitColsPtr=0;unitColsPtr<inputUsageUnitCols.Split(';').Length;unitColsPtr++)
																 {
																 #>
																 (long)<#=inputUsageUnitCols.Split(';')[unitColsPtr]#> AS <#=inputUsageUnitCols.Split(';')[unitColsPtr]#>,
																 <#
																 }
																 #>
																 <#
																 for(int unitColsPtr=0;unitColsPtr<inputRawAggregateByCols.Split(';').Length;unitColsPtr++)
																 {
																 #>
																 <#=inputRawAggregateByCols.Split(';')[unitColsPtr]#>,
																 <#
																 }
																 #>
																DeviceClass,
																OSVersionOnly AS OSVersion,
																OSVersion AS OSVersionFull,
																HourId,
																UsageHour
															FROM AggreateAppUsageMetricHourlyData_<#=idxLookBackDay#> ;


		// Grouping by all the Device ID and Aggregate By Cols for daily stream
		UsageDataDaily_<#=idxLookBackDay#> = SELECT DeviceId,
														<#
														 for(int unitColsPtr=0;unitColsPtr<inputUsageUnitCols.Split(';').Length;unitColsPtr++)
														 {
														 #>
														 (long)SUM(<#=inputUsageUnitCols.Split(';')[unitColsPtr]#>) AS <#=inputUsageUnitCols.Split(';')[unitColsPtr]#>,
														 <#
														 }
														 #>
														 <#
														 for(int unitColsPtr=0;unitColsPtr<inputAggregateByCols.Split(';').Length;unitColsPtr++)
														 {
														 #>
														 <#=inputAggregateByCols.Split(';')[unitColsPtr]#>,
														 <#
														 }
														 #>
														 DeviceClass,
														MAX(@usageDate.AddHours(HourId%100)) AS UsageDateMaxHour,
														MIN(DailyFirstSeenDateTime) AS DailyFirstSeenDateTime,
														MAX(DailyLastSeenDateTime) AS DailyLastSeenDateTime
														FROM AggreateAppUsageMetricHourlyData_<#=idxLookBackDay#>
														GROUP BY DeviceId,
														<#
														 for(int aggColsPtr=0;aggColsPtr<inputAggregateByCols.Split(';').Length;aggColsPtr++)
														 {
														 #>
														 <#=inputAggregateByCols.Split(';')[aggColsPtr]#>,
														 <#
														 }
														 #>
														 DeviceClass
														;
		// Grouping by all the Device ID and Aggregate By Cols for hourly stream
		UsageDataHourly_<#=idxLookBackDay#> = SELECT DeviceId,
													 DeviceClass,
													 UsageHour,
													 <#
														 for(int unitColsPtr=0;unitColsPtr<inputAggregateByCols.Split(';').Length;unitColsPtr++)
														 {
														 #>
														 <#=inputAggregateByCols.Split(';')[unitColsPtr]#>,
														 <#
														 }
														 #>
														<#
														 for(int unitColsPtr=0;unitColsPtr<inputUsageUnitCols.Split(';').Length;unitColsPtr++)
														 {
														 #>
														 (long)SUM(<#=inputUsageUnitCols.Split(';')[unitColsPtr]#>) AS <#=inputUsageUnitCols.Split(';')[unitColsPtr]#>,
														 <#
														 }
														 #>
														MIN(DailyFirstSeenDateTime) AS DailyFirstSeenDateTime,
														MAX(DailyLastSeenDateTime) AS DailyLastSeenDateTime
														FROM AggreateAppUsageMetricHourlyData_<#=idxLookBackDay#>
														GROUP BY DeviceId,
														UsageHour,
														<#
														 for(int aggColsPtr=0;aggColsPtr<inputAggregateByCols.Split(';').Length;aggColsPtr++)
														 {
														 #>
														 <#=inputAggregateByCols.Split(';')[aggColsPtr]#>,
														 <#
														 }
														 #>
														 DeviceClass
														;
// Rearranging hourly columns
UsageDataHourly_<#=idxLookBackDay#> = SELECT DeviceId,
											DeviceClass,
											UsageHour,
											<#
											for(int unitColsPtr=0;unitColsPtr<inputAggregateByCols.Split(';').Length;unitColsPtr++)
											{
											#>
											<#=inputAggregateByCols.Split(';')[unitColsPtr]#>,
											<#
											}
											#>
											((OSVersion.Split('.').Length>3) ? (HelperRoutine.ParseString(OSVersion.Split('.')[3])) :  int.MaxValue) AS OSRevision,
											<#
											for(int aggColsPtr=0;aggColsPtr<inputUsageUnitCols.Split(';').Length;aggColsPtr++)
											{
											#>
											(long)SUM(<#=inputUsageUnitCols.Split(';')[aggColsPtr]#>) AS <#=inputUsageUnitCols.Split(';')[aggColsPtr]#>,
											<#
											}
											#>
											DailyFirstSeenDateTime,
											DailyLastSeenDateTime
									  FROM UsageDataHourly_<#=idxLookBackDay#>
									  HAVING OSRevision !=  int.MaxValue;

 // Fetching Max usage date for daily stream
 MaxUsageDate = SELECT MAX(DailyLastSeenDateTime) AS UsageDate
									  FROM  UsageDataDaily_<#=idxLookBackDay#>;

 UsageDataDaily_<#=idxLookBackDay#> = SELECT u.*,m.*
									  FROM  UsageDataDaily_<#=idxLookBackDay#> AS u
									  CROSS JOIN MaxUsageDate AS m;

// Rearranging the columns
UsageDataDaily_<#=idxLookBackDay#> = SELECT DeviceId,
											DeviceClass,
											UsageDate,
											UsageDateMaxHour,
											<#
												for(int aggColsPtr=0;aggColsPtr<inputAggregateByCols.Split(';').Length;aggColsPtr++)
												{
												#>
												<#=inputAggregateByCols.Split(';')[aggColsPtr]#>,
												<#
												}
											#>
											((OSVersion.Split('.').Length>3) ? (HelperRoutine.ParseString(OSVersion.Split('.')[3])) :  int.MaxValue) AS OSRevision,
											<#
												for(int unitColsPtr=0;unitColsPtr<inputUsageUnitCols.Split(';').Length;unitColsPtr++)
												{
												#>
												(long)SUM(<#=inputUsageUnitCols.Split(';')[unitColsPtr]#>) AS <#=inputUsageUnitCols.Split(';')[unitColsPtr]#>,
												<#
												}
											#>
											DailyFirstSeenDateTime,
											DailyLastSeenDateTime
											FROM UsageDataDaily_<#=idxLookBackDay#>
											HAVING OSRevision !=  int.MaxValue;

[Privacy.DataType.ProductAndServiceUsage]
[Privacy.DataType.ProductAndServicePerformance]
[Privacy.Subject.Device.CommonSchema(Column="DeviceId")]
OUTPUT UsageDataDaily_<#=idxLookBackDay#>
TO SSTREAM @output_UsageDataDaily_ss
CLUSTERED BY <#
			for(int aggColsPtr=0;aggColsPtr<inputAggregateByCols.Split(';').Length;aggColsPtr++)
			{
			#>
			<#=inputAggregateByCols.Split(';')[aggColsPtr]#>,
			<#
			}
			#>DeviceId
SORTED BY <#
			for(int aggColsPtr=0;aggColsPtr<inputAggregateByCols.Split(';').Length;aggColsPtr++)
			{
			#>
			<#=inputAggregateByCols.Split(';')[aggColsPtr]#>,
			<#
			}
			#>DeviceId
WITH STREAMEXPIRY @"<#= expirationStreamCount #>";


 UsageDataDailyWithXML_<#=idxLookBackDay#> = SELECT string.Concat(
											 <#
											 for(int unitColsPtr=0;unitColsPtr<inputUsageUnitCols.Split(';').Length;unitColsPtr++)
											 {
											 #>
											 "<Field Name=\"","<#=inputUsageUnitCols.Split(';')[unitColsPtr]#>","\">",<#=inputUsageUnitCols.Split(';')[unitColsPtr]#>,"</Field>",
											 <#
											 }
											 #>"") AS UsageUnitColumns,
											 <#
											for(int aggColsPtr=0;aggColsPtr<inputAggregateByCols.Split(';').Length;aggColsPtr++)
											{
											#>
											<#=inputAggregateByCols.Split(';')[aggColsPtr]#>,
											<#
											}
											#>
											 DeviceId,
											 DeviceClass,
											 UsageDateMaxHour,
											 DailyFirstSeenDateTime,
											 DailyLastSeenDateTime,
											 UsageDate
											FROM UsageDataDaily_<#=idxLookBackDay#>;


UsageDataDailyWithXML_<#=idxLookBackDay#> = SELECT DeviceId,
										UsageDateMaxHour,
										string.Join("", LIST(UsageUnitColumns).ToArray()) AS UsageUnitXML,
										DailyFirstSeenDateTime,
										DailyLastSeenDateTime,
										<#
										for(int aggColsPtr=0;aggColsPtr<inputAggregateByCols.Split(';').Length;aggColsPtr++)
										{
										#>
										<#=inputAggregateByCols.Split(';')[aggColsPtr]#>,
										<#
										}
										#>
										DeviceClass
										FROM UsageDataDailyWithXML_<#=idxLookBackDay#>
										GROUP BY DeviceId,
										UsageDateMaxHour,
										DailyFirstSeenDateTime,
										DailyLastSeenDateTime,
										<#
										for(int aggColsPtr=0;aggColsPtr<inputAggregateByCols.Split(';').Length;aggColsPtr++)
										{
										#>
										<#=inputAggregateByCols.Split(';')[aggColsPtr]#>,
										<#
										}
										#>
										DeviceClass;

UsageDataDailyWithXML_<#=idxLookBackDay#> = SELECT DeviceId,
										UsageDateMaxHour,
										UsageUnitXML,
										DailyFirstSeenDateTime,
										DailyLastSeenDateTime,
										string.Concat(
										<#
										for(int aggColsPtr=0;aggColsPtr<inputAggregateByCols.Split(';').Length;aggColsPtr++)
										{
										#>
										"<Field Name=\"","<#=inputAggregateByCols.Split(';')[aggColsPtr]#>","\">",<#=inputAggregateByCols.Split(';')[aggColsPtr]#>,"</Field>",
										<#
										}
										#>"") AS AggregateByXML,
										DeviceClass
										FROM UsageDataDailyWithXML_<#=idxLookBackDay#>;


UsageDataDailyWithXML_<#=idxLookBackDay#> = SELECT DeviceId,
										UsageDateMaxHour,
										string.Concat("<CustomFields>",UsageUnitXML,"</CustomFields>") AS UsageUnit,
										DailyFirstSeenDateTime,
										DailyLastSeenDateTime,
										DeviceClass,
										string.Concat("<CustomFields>",AggregateByXML,"</CustomFields>") AS AggregateBy
										FROM UsageDataDailyWithXML_<#=idxLookBackDay#>;


 [Privacy.DataType.ProductAndServiceUsage]
[Privacy.DataType.ProductAndServicePerformance]
[Privacy.Subject.Device.CommonSchema(Column="DeviceId")]
OUTPUT UsageDataDailyWithXML_<#=idxLookBackDay#>
TO SSTREAM @output_UsageDataDailyWithXML_ss
CLUSTERED BY DeviceId,AggregateBy
SORTED BY DeviceId,AggregateBy
WITH STREAMEXPIRY @"<#= expirationStreamCount #>";



// XML columns for each usage primary unit columns
UsageDataHourlyWithXML_<#=idxLookBackDay#> = SELECT 
											string.Concat(
											 <#
											 for(int unitColsPtr=0;unitColsPtr<inputUsageUnitCols.Split(';').Length;unitColsPtr++)
											 {
											 #>
											 "<Field Name=\"","<#=inputUsageUnitCols.Split(';')[unitColsPtr]#>","\">",<#=inputUsageUnitCols.Split(';')[unitColsPtr]#>,"</Field>",
											 <#
											 }
											 #>"") AS UsageUnitColumns,
											 <#
											for(int aggColsPtr=0;aggColsPtr<inputAggregateByCols.Split(';').Length;aggColsPtr++)
											{
											#>
											<#=inputAggregateByCols.Split(';')[aggColsPtr]#>,
											<#
											}
											#>
											DeviceId,
											UsageHour,
											DailyFirstSeenDateTime,
											DeviceClass,
											DailyLastSeenDateTime
											FROM UsageDataHourly_<#=idxLookBackDay#>;

UsageDataHourlyWithXML_<#=idxLookBackDay#> =  SELECT DeviceId,
													UsageHour,
													string.Join("", LIST(UsageUnitColumns).ToArray()) AS UsageUnitXML,
													DailyFirstSeenDateTime,
													DeviceClass,
													<#
													for(int aggColsPtr=0;aggColsPtr<inputAggregateByCols.Split(';').Length;aggColsPtr++)
													{
													#>
													<#=inputAggregateByCols.Split(';')[aggColsPtr]#>,
													<#
													}
													#>
													DailyLastSeenDateTime
													FROM UsageDataHourlyWithXML_<#=idxLookBackDay#>
													GROUP BY DeviceId,
													UsageHour,
													DailyFirstSeenDateTime,
													DailyLastSeenDateTime,
													<#
													for(int aggColsPtr=0;aggColsPtr<inputAggregateByCols.Split(';').Length;aggColsPtr++)
													{
													#>
													<#=inputAggregateByCols.Split(';')[aggColsPtr]#>,
													<#
													}
													#>
													DeviceClass
												;

UsageDataHourlyWithXML_<#=idxLookBackDay#> = SELECT DeviceId,
													UsageHour,
													UsageUnitXML,
													DailyFirstSeenDateTime,
													DailyLastSeenDateTime,
													string.Concat(
													<#
													for(int aggColsPtr=0;aggColsPtr<inputAggregateByCols.Split(';').Length;aggColsPtr++)
													{
													#>
													"<Field Name=\"","<#=inputAggregateByCols.Split(';')[aggColsPtr]#>","\">",<#=inputAggregateByCols.Split(';')[aggColsPtr]#>,"</Field>",
													<#
													}
													#>"") AS AggregateByXML,
													DeviceClass
													FROM UsageDataHourlyWithXML_<#=idxLookBackDay#>;

UsageDataHourlyWithXML_<#=idxLookBackDay#> = SELECT DeviceId,
													UsageHour,
													string.Concat("<CustomFields>",UsageUnitXML,"</CustomFields>") AS UsageUnit,
													DailyFirstSeenDateTime,
													DailyLastSeenDateTime,
													DeviceClass,
													string.Concat("<CustomFields>",AggregateByXML,"</CustomFields>") AS AggregateBy
													FROM UsageDataHourlyWithXML_<#=idxLookBackDay#>;

// Generatin each hour stream
<#
for(int idxHour=0;idxHour < MaxHours;idxHour++)
{
#>

// Individual rows of primary usage columns
UsageDataForEachHour_<#=idxHour#> = SELECT * 
							   FROM UsageDataHourly_<#=idxLookBackDay#>
							   WHERE UsageHour == <#=idxHour#>;

#SET usageDateHour = @usageDate.Date.AddHours(<#=idxHour#>);

#SET output_UsageHourly_ss = string.Format("{0}/{2}/{3}"+"_{1:yyyy}-{1:MM}-{1:dd}-{1:HH}.ss", 
                                                                       @"<#=inputReliabilityRoot#>",
                                                                       @usageDateHour,
                                                                       @"<#=inputUsageHourlyFolder#>",
                                                                       @"<#=inputUsageHourlyStreamName#>");

[Privacy.DataType.ProductAndServiceUsage]
[Privacy.DataType.ProductAndServicePerformance]
[Privacy.Subject.Device.CommonSchema(Column="DeviceId")]
OUTPUT UsageDataForEachHour_<#=idxHour#>
TO SSTREAM @output_UsageHourly_ss
CLUSTERED BY <#
			for(int aggColsPtr=0;aggColsPtr<inputAggregateByCols.Split(';').Length;aggColsPtr++)
			{
			#>
			<#=inputAggregateByCols.Split(';')[aggColsPtr]#>,
			<#
			}
			#>DeviceId
SORTED BY <#
			for(int aggColsPtr=0;aggColsPtr<inputAggregateByCols.Split(';').Length;aggColsPtr++)
			{
			#>
			<#=inputAggregateByCols.Split(';')[aggColsPtr]#>,
			<#
			}
			#>DeviceId
WITH STREAMEXPIRY @"<#= expirationStreamCount #>";


// XML of unit usage pivots
UsageDataForEachHourWithXML_<#=idxHour#> = SELECT * 
							   FROM UsageDataHourlyWithXML_<#=idxLookBackDay#>
							   WHERE UsageHour == <#=idxHour#>;

#SET usageDateHour = @usageDate.Date.AddHours(<#=idxHour#>);

#SET output_UsageHourlyWithXML_ss = string.Format("{0}/{2}/{3}"+"_{1:yyyy}-{1:MM}-{1:dd}-{1:HH}.ss", 
                                                                       @"<#=inputReliabilityRoot#>",
                                                                       @usageDateHour,
                                                                       @"<#=inputUsageHourlyFolder#>",
                                                                       @"<#=inputUsageHourlyWithXMLStreamName#>");

[Privacy.DataType.ProductAndServiceUsage]
[Privacy.DataType.ProductAndServicePerformance]
[Privacy.Subject.Device.CommonSchema(Column="DeviceId")]
OUTPUT UsageDataForEachHourWithXML_<#=idxHour#>
TO SSTREAM @output_UsageHourlyWithXML_ss
CLUSTERED BY DeviceId,AggregateBy
SORTED BY DeviceId,AggregateBy
WITH STREAMEXPIRY @"<#= expirationStreamCount #>";

 <#
 }
 }
#>;

#CS
using System;
using System.Collections.Generic;
using System.IO;
using System.Text;
using ScopeRuntime;

public class HelperRoutine
{
    public static int? ParseString(string s_Value)
    {
        int i_Value = 0;
        int? ret_Value = null;

        if (Int32.TryParse(s_Value, out i_Value) == true)
            ret_Value = i_Value;
        
        return i_Value;    
    }
    
}
#ENDCS