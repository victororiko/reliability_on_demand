<#@ template language="c#" debug="true" hostspecific="true" #>
<#@ import namespace = "VcClient" #>
<#@ import namespace = "System.Collections.Generic" #>
<#@ import namespace = "System.IO" #>
<#@ import namespace = "System.Web" #>
<#@include file="ReadTextFromStream.scopet4" #>
<#@ import namespace = "System" #>
<#@ assembly name= "NEWTONSOFT.JSON.DLL" #>
<#@ import namespace = "Newtonsoft.Json" #>
<#@ import namespace = "Newtonsoft.Json.Linq" #>
<#@include file="ConfigurationHelper.scopet4" #>
<#@include file="DebugOutput.scopet4" #>
<#@include file="SchemaExplorer.scopet4" #>
<#@include file="GetLatestStreamDate.scopet4" #>
<#@include file="SaveTextToStream.scopet4" #>

/*
Generates the aggregate Usage for last 14 days from Watsonlatesttime using the hourly streams
*/
<#
    var context = Host.GetHostOption("T4Context") as IT4TransformContext;
	string feederJSONFile = @"shares/asimov.prod.data/PublicPartner/Processed/Reliability/RIOD/Resources/RIODFeeder/FeederOutputs/RIODUsageColumns.json";
	DateTime today = DateTime.UtcNow;
	int inputDayLookBack=14;
	string inputReliabilityRoot = @"/shares/asimov.prod.data/PublicPartner/Processed/Reliability/RIOD/Streams/";
	string inputUsageDailyFolder = @"/Usage/AggregatedObservationPeriod/";
	string expirationStreamCount = "30";
	string inputUsageWatsonCutOffStreamName = @"UsageFor";
	Char[] trimChars = new Char[] { ' ', '*', '.', '[', ']', '{', '}','"'};
	string inputWatsonMarkerFile = @"/shares/asimov.prod.data/PublicPartner/Processed/Reliability/RIOD/Resources/WatsonLatestTime.txt";

	string inputWatsonLatestTimeFile = ReadTextFromStream(inputWatsonMarkerFile);
    string watsonLatestTimeString = inputWatsonLatestTimeFile.Trim(trimChars).Split('\n')[0];
	DateTime watsonLatestTime = DateTime.Parse(watsonLatestTimeString);
	string inputCurrentStreamName = @"RIOD.Devices.Usage.Aggregated";
	string inputWatsonWithXMLStreamName = @"UsageXMLFor";
	string inputCurrentGenericStreamName = @"RIOD.Devices.Usage.Aggregated.Generic";

	// Workflow parameter for all predicted usage unit that can be used
	string inputUsageUnitCols = "InteractivityDurationMS;EngagementDurationMS;FocusDurationMS;OutOfFocusDurationMS;ProcessDurationMS;RunDurationMS;SuspendDurationMS;AudioInMS;AudioOutMS;UserActiveDurationMS";

    // Check if we are running under XFlow
    if (context != null)
    {
       feederJSONFile = (string)context.GetParameter<string>("_feederJSONFile", feederJSONFile);
	   inputReliabilityRoot = (string)context.GetParameter<string>("_inputReliabilityRoot", inputReliabilityRoot);
	   inputUsageDailyFolder = (string)context.GetParameter<string>("_inputUsageDailyFolder", inputUsageDailyFolder);
	   expirationStreamCount = (string)context.GetParameter<string>("_expirationStreamCount", expirationStreamCount);
	   inputUsageWatsonCutOffStreamName = (string)context.GetParameter<string>("_inputUsageWatsonCutOffStreamName", inputUsageWatsonCutOffStreamName);
	   inputWatsonMarkerFile = (string)context.GetParameter<string>("_inputWatsonMarkerFile", inputWatsonMarkerFile);
	   inputCurrentStreamName = (string)context.GetParameter<string>("_inputCurrentStreamName", inputCurrentStreamName);
	   inputWatsonWithXMLStreamName = (string)context.GetParameter<string>("_inputWatsonWithXMLStreamName", inputWatsonWithXMLStreamName);
	   inputCurrentGenericStreamName = (string)context.GetParameter<string>("_inputCurrentGenericStreamName", inputCurrentGenericStreamName);
	   inputUsageUnitCols = (string)context.GetParameter<string>("_inputUsageUnitCols", inputUsageUnitCols);
    }
	
    string UsageJoinKey = string.Empty;
	string UsagePivotColumns = string.Empty;
	
	string configContent = ReadTextFromStream(feederJSONFile);
    List<Dictionary<string,string>> configInfo = new List<Dictionary<string,string>>();

	JArray jsonFeederConfig = JArray.Parse(configContent);
	string UsageUnitList = "";
	HashSet<string> UsageUnitSet = new HashSet<string>();
	HashSet<string> UsageKeysSet = new HashSet<string>();

	// Makin sure Interactivity and Engagement are always there for the Kusto data
	UsageUnitSet.Add("EngagementDurationMS");
	UsageUnitSet.Add("InteractivityDurationMS");

	foreach (JObject content in jsonFeederConfig.Children<JObject>())
    {
		// keep track of distinct usage unit columns to do union of all usage unit columns
		UsageUnitList = content["UsagePivotColumns"].ToString().Trim(trimChars).Replace("\"","");
		if(!String.IsNullOrEmpty(UsageUnitList))
			UsageUnitList.Split(',').ToList().ForEach(x => UsageUnitSet.Add(x.Trim()));

		UsageJoinKey = content["UsageJoinKeyExpressionCols"].ToString();
		UsagePivotColumns = content["UsagePivotColumns"].ToString();

		Dictionary<string, string> usageQueryDetails = new Dictionary<string, string> ();

		usageQueryDetails.Add("UsageJoinKey", UsageJoinKey);
		usageQueryDetails.Add("UsagePivotColumns", UsagePivotColumns);

		configInfo.Add(usageQueryDetails);

		// Collecting all unqiue expression keys in the set
		UsageKeysSet.Add(UsageJoinKey);
	}
#>

USING System.Security.Cryptography; 
// Import Next Generation Privacy annotation module 
// Ref: https://microsoft.sharepoint.com/teams/ngphome/ngpx/execution/Official%20Documents/NGPX%20Technical%20Specifications/Privacy%20Tags%20Taxonomy.docx?web=1 
MODULE @"/shares/PXSCosmos15.Prod/PXS.DeleteSignal.PROD/PrivacyAnnotation/PrivacyAnnotation.module"; 
USING Privacy;

#DECLARE input_UsagePattern_ss string = @"/Usage/Hourly/UsageHourlyData_%Y-%m-%d-%h.ss";

#DECLARE runDate DateTime = DateTime.Parse("<#=watsonLatestTime#>");
#DECLARE xStartDate DateTime = @runDate.AddDays(-<#=inputDayLookBack#>);
#DECLARE endDate string = @runDate.ToString("yyyy-MM-dd");
#DECLARE startDate string = @runDate.Date.AddDays(-<#=inputDayLookBack+1#>).ToString("yyyy-MM-dd");
#DECLARE output_UsageWatsonLastXDays_ss = "";
#DECLARE EndDateId int = @runDate.Year * 10000 + @runDate.Month * 100 + @runDate.Day + @runDate.Hour;
#DECLARE StartDateId int = @xStartDate.Year * 10000 + @xStartDate.Month * 100 + @xStartDate.Day + @xStartDate.Hour;
#DECLARE output_currentAggUsage_ss string= string.Format("{0}/{1}/{2}"+".ss", 
                                            @"<#=inputReliabilityRoot#>",
                                            @"<#=inputUsageDailyFolder#>",
                                            @"<#=inputCurrentStreamName#>");
#DECLARE output_currentAggUsageGeneric_ss string= string.Format("{0}/{1}/{2}"+".ss", 
                                            @"<#=inputReliabilityRoot#>",
                                            @"<#=inputUsageDailyFolder#>",
                                            @"<#=inputCurrentGenericStreamName#>");
#DECLARE output_UsageWatsonXMLLastXDays_ss = "";

// Fetching last 15 days hourly stream
input = SELECT *
		FROM
		(
		SSTREAM
                                SPARSE STREAMSET "<#=inputReliabilityRoot#>"
								PATTERN @input_UsagePattern_ss
								RANGE __date = [@startDate, @endDate],
								__hour = ["00", "23"]
		);

#SET output_UsageWatsonLastXDays_ss = string.Format("{0}/{1}/{2}_{3}Days_{4}"+".ss", 
                                            @"<#=inputReliabilityRoot#>",
                                            @"<#=inputUsageDailyFolder#>",
                                            @"<#=inputUsageWatsonCutOffStreamName#>",
											@"<#=inputDayLookBack#>",
											@runDate.ToString("yyyy-MM-dd_hh_mm_ss"));

#SET output_UsageWatsonXMLLastXDays_ss = string.Format("{0}/{1}/{2}_{3}Days_{4}"+".ss", 
                                            @"<#=inputReliabilityRoot#>",
                                            @"<#=inputUsageDailyFolder#>",
                                            @"<#=inputWatsonWithXMLStreamName#>",
											@"<#=inputDayLookBack#>",
											@runDate.ToString("yyyy-MM-dd_hh_mm_ss"));

// Calculate the ID for the timestamp hourly stream has been produced
input = SELECT *,
		DailyFirstSeenDateTime.Year * 10000 + DailyFirstSeenDateTime.Month * 100 + DailyFirstSeenDateTime.Day + UsageHour AS UsageDateId
		FROM input;

// Apply the cutoff filter to fetch the required usage data for last 14 days from the Watson Cut off time
input = SELECT i.*
		FROM input AS i
		WHERE UsageDateId>=@StartDateId AND UsageDateId<=@EndDateId;

<#
    int i=0;
	Dictionary<string, string> UsageQueryDetailsOut = new Dictionary<string, string>();
	// For each of the query in the feeder file
	foreach(var ele in UsageKeysSet)
	{
		UsageJoinKey = ele.Trim(trimChars).Replace("\"","");

		// loop for individual cols stream
		String[] usageUnits = inputUsageUnitCols.Split(';');
#>
			UsageDataIndividualCols_<#=i#> = SELECT DeviceId,
								 DeviceClass,
								 <#
								 for(int k=0;k<inputUsageUnitCols.Split(';').Length;k++)
								 {
								 #>
									<#=inputUsageUnitCols.Split(';')[k]#>,
								 <#
								 }
								 #>
								 string.Concat(
								 <#
								 for(int k=0;k<UsageJoinKey.Split(',').Length;k++)
								 {
								 if(k!= UsageJoinKey.Split(',').Length-1)
								 {
								 #>
								 <#=UsageJoinKey.Split(',')[k]#>,".",
								 <#
								 }
								 else
								 {
								 #>
								 <#=UsageJoinKey.Split(',')[k]#>
								 <#
								 }
								 #>
								 <#
								 }
								 #>) AS UsageJoinKey,
								 DailyFirstSeenDateTime,
								 DailyLastSeenDateTime
								 FROM input;

		// Generating guid for the key
		UsageDataIndividualCols_<#=i#> = SELECT *,
										(Guid)new Guid(MD5.Create() .ComputeHash(Encoding.Default.GetBytes(UsageJoinKey))) AS UsageJoinGuid
										FROM UsageDataIndividualCols_<#=i#>
										HAVING UsageJoinGuid != NULL;
		
		// Grouping by the key
		UsageDataIndividualCols_<#=i#> = SELECT DeviceId,
										 DeviceClass,
										 UsageJoinKey,
										(Guid)UsageJoinGuid AS UsageJoinGuid,
										MIN(DailyFirstSeenDateTime) AS DailyFirstSeenDateTime,
										MAX(DailyLastSeenDateTime) AS DailyLastSeenDateTime,
										<#
										 for(int k=0;k<inputUsageUnitCols.Split(';').Length;k++)
										 {
										 if(k!= inputUsageUnitCols.Split(';').Length-1)
										 {
										 #>
											SUM(<#=inputUsageUnitCols.Split(';')[k]#>) AS <#=inputUsageUnitCols.Split(';')[k]#>,
										 <#
										 }
										 else
										 {
										 #>
											SUM(<#=inputUsageUnitCols.Split(';')[k]#>) AS <#=inputUsageUnitCols.Split(';')[k]#>
										 <#
										 }
										 }
										 #>
										FROM UsageDataIndividualCols_<#=i#>
										GROUP BY DeviceId,
										UsageJoinKey,
										DeviceClass,
										UsageJoinGuid
										; 

		<#
             if(i==0)
             {
#>
					// union of results
                    UsageDataIndividualCols = SELECT *
                                     FROM UsageDataIndividualCols_<#=i#>;

<#
			 }
		     else
		     {
#>
                   UsageDataIndividualCols = SELECT *
                                    FROM UsageDataIndividualCols
                                    UNION 
                                    SELECT *
                                    FROM UsageDataIndividualCols_<#=i#>;		
	<#
	}
	#>


<#
		int j=0;

		// loop to produce XML stream
		foreach(var unit in UsageUnitSet)
		{

#>
		// Fetches the required columns from the usage stream
		UsageData_<#=i#><#=j#> = SELECT DeviceId,
								 (long)<#=unit#> AS UsageUnitValue,
								 "<#=unit#>" AS UsageUnitColumn,
								 DeviceClass,
								 string.Concat(
								 <#
								 for(int k=0;k<UsageJoinKey.Split(',').Length;k++)
								 {
								 if(k!= UsageJoinKey.Split(',').Length-1)
								 {
								 #>
								 <#=UsageJoinKey.Split(',')[k]#>,".",
								 <#
								 }
								 else
								 {
								 #>
								 <#=UsageJoinKey.Split(',')[k]#>
								 <#
								 }
								 #>
								 <#
								 }
								 #>) AS UsageJoinKey,
								 DailyFirstSeenDateTime,
								 DailyLastSeenDateTime
								 FROM input;


		// Generating guid for the key
		UsageData_<#=i#><#=j#> = SELECT *,
										(Guid)new Guid(MD5.Create() .ComputeHash(Encoding.Default.GetBytes(UsageJoinKey))) AS UsageJoinGuid
										FROM UsageData_<#=i#><#=j#>
										HAVING UsageJoinGuid != NULL;
		
		// Grouping by the key
		UsageData_<#=i#><#=j#> = SELECT DeviceId,
										SUM(UsageUnitValue) AS UsageUnitValue,
										ANY_VALUE(UsageUnitColumn) AS UsageUnitColumn,
										UsageJoinKey,
										(Guid)UsageJoinGuid AS UsageJoinGuid,
										DeviceClass,
										MIN(DailyFirstSeenDateTime) AS DailyFirstSeenDateTime,
										MAX(DailyLastSeenDateTime) AS DailyLastSeenDateTime
										FROM UsageData_<#=i#><#=j#>
										GROUP BY DeviceId,
										UsageJoinKey,
										DeviceClass,
										UsageJoinGuid
										; 

<#
             if(i==0 && j==0)
             {
#>
					// union of results
                    UsageData = SELECT *
                                     FROM UsageData_<#=i#><#=j#>;

<#
			 }
		     else
		     {
#>
                   UsageData = SELECT *
                                    FROM UsageData
                                    UNION 
                                    SELECT *
                                    FROM UsageData_<#=i#><#=j#>;

<#
		}
		j++;
  }
  i++;
 }
#>

// 14 Days Aggregate Usage stream with primary pivots as individual cols
[Privacy.DataType.ProductAndServiceUsage]
[Privacy.DataType.ProductAndServicePerformance]
[Privacy.Subject.Device.CommonSchema(Column="DeviceId")]
OUTPUT UsageDataIndividualCols
TO SSTREAM @output_UsageWatsonLastXDays_ss
CLUSTERED BY DeviceId,UsageJoinKey,UsageJoinGuid
SORTED BY DeviceId,UsageJoinKey,UsageJoinGuid
WITH STREAMEXPIRY @"<#= expirationStreamCount #>";

// 14 Days Aggregate Usage current stream
[Privacy.DataType.ProductAndServiceUsage]
[Privacy.DataType.ProductAndServicePerformance]
[Privacy.Subject.Device.CommonSchema(Column="DeviceId")]
OUTPUT UsageDataIndividualCols
TO SSTREAM @output_currentAggUsage_ss
CLUSTERED BY DeviceId,UsageJoinKey,UsageJoinGuid
SORTED BY DeviceId,UsageJoinKey,UsageJoinGuid
WITH STREAMEXPIRY @"<#= expirationStreamCount #>";

 UsageData = SELECT DeviceId,
					DeviceClass,
					@xStartDate AS StartDate,
					@runDate AS WatsonLatestDate,
					UsageJoinKey,
					(Guid)UsageJoinGuid AS UsageJoinGuid,
					(long)UsageUnitValue AS UsageUnitValue,
					UsageUnitColumn,
					DailyFirstSeenDateTime,
					DailyLastSeenDateTime
					FROM UsageData;


// Producing XML of primary pivots
UsageDataXML = SELECT DeviceId,
					DeviceClass,
					@xStartDate AS StartDate,
					@runDate AS WatsonLatestDate,
					UsageJoinKey,
					UsageJoinGuid,
					string.Concat("\"",UsageUnitColumn,"\":\"",UsageUnitValue,"\"") AS UsageUnitXML,
					DailyFirstSeenDateTime,
					DailyLastSeenDateTime
					FROM UsageData;

// Group all the usage unit for a single device in the XML
UsageDataXML = SELECT DeviceId,
					DeviceClass,
					@xStartDate AS StartDate,
					@runDate AS WatsonLatestDate,
					UsageJoinKey,
					UsageJoinGuid,
					string.Join(",", LIST(UsageUnitXML).ToArray()) AS UsageUnitXML,
					DailyFirstSeenDateTime,
					DailyLastSeenDateTime
					FROM UsageDataXML
					GROUP BY
					DeviceId,
					DeviceClass,
					StartDate,
					WatsonLatestDate,
					UsageJoinKey,
					UsageJoinGuid,
					DailyFirstSeenDateTime,
					DailyLastSeenDateTime;

UsageDataXML  = SELECT DeviceId,
					DeviceClass,
					@xStartDate AS StartDate,
					@runDate AS WatsonLatestDate,
					UsageJoinKey,
					UsageJoinGuid,
					string.Concat("{",UsageUnitXML,"}") AS UsageUnit,
					DailyFirstSeenDateTime,
					DailyLastSeenDateTime
					FROM UsageDataXML;

// 14 days aggregate usage stream with XML of primary pivots 
[Privacy.DataType.ProductAndServiceUsage]
[Privacy.DataType.ProductAndServicePerformance]
[Privacy.Subject.Device.CommonSchema(Column="DeviceId")]
OUTPUT UsageDataXML
TO SSTREAM @output_UsageWatsonXMLLastXDays_ss
CLUSTERED BY DeviceId,UsageJoinKey,UsageJoinGuid
SORTED BY DeviceId,UsageJoinKey,UsageJoinGuid
WITH STREAMEXPIRY @"<#= expirationStreamCount #>";


// 14 Days Aggregate Usage current XML stream
[Privacy.DataType.ProductAndServiceUsage]
[Privacy.DataType.ProductAndServicePerformance]
[Privacy.Subject.Device.CommonSchema(Column="DeviceId")]
OUTPUT UsageDataXML
TO SSTREAM @output_currentAggUsageGeneric_ss
CLUSTERED BY DeviceId,UsageJoinKey,UsageJoinGuid
SORTED BY DeviceId,UsageJoinKey,UsageJoinGuid
WITH STREAMEXPIRY @"<#= expirationStreamCount #>";