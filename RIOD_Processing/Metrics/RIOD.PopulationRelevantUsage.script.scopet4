<#@ template language="c#" debug="true" hostspecific="true" #>
<#@ import namespace = "VcClient" #>
<#@ import namespace = "System.Collections.Generic" #>
<#@ import namespace = "System.IO" #>
<#@include file="ReadTextFromStream.scopet4" #>
<#@ import namespace = "System" #>
<#@ assembly name= "NEWTONSOFT.JSON.DLL" #>
<#@ import namespace = "Newtonsoft.Json" #>
<#@ import namespace = "Newtonsoft.Json.Linq" #>
<#@include file="ConfigurationHelper.scopet4" #>
<#@include file="DebugOutput.scopet4" #>
<#@include file="SchemaExplorer.scopet4" #>
<#@include file="GetLatestStreamDate.scopet4" #>
<#@include file="SaveTextToStream.scopet4" #>

/*
 --------------------------------------------------------------------------------------------------------------------
Combines all the 3 streams together - Population, Failure and Usage based on Study type join key>
 --------------------------------------------------------------------------------------------------------------------
*/

<#
    var context = Host.GetHostOption("T4Context") as IT4TransformContext;
	string inputFolder = @"shares/asimov.prod.data/PublicPartner/Processed/Reliability/RIOD/Streams/";
	string inputPopulationAggStream = @"/Population/Aggregated/RIOD.Devices.Population.Aggregated.Generic.ss";
	string inputUsageAggStream = @"/Usage/AggregatedObservationPeriod/RIOD.Devices.Usage.Aggregated.Generic.ss";
	string inputFailureAggStream = @"/Failures/Aggregated/RIOD.Devices.Failures.Flattened.Generic.ss";
	string outputFolder = @"/shares/asimov.prod.data/PublicPartner/Processed/Reliability/RIOD/Streams/DevicesFlattened/";
	string outputStreamName=@"RIOD.Devices.Flattened.Generic.ss";
	string outputStreamNameWithoutXML=@"RIOD.Devices.Flattened.Expanded.ss";
	int numberOfPartitions = 1200;
	DateTime today = DateTime.UtcNow;

	string inputPopulationAggExpandedStream = @"/Population/Aggregated/RIOD.Devices.Population.Aggregated.ss";
	string inputUsageAggExpandedStream = @"/Usage/AggregatedObservationPeriod/RIOD.Devices.Usage.Aggregated.ss";
	string inputFailureAggExpandedStream = @"/Failures/Aggregated/RIOD.Devices.Failures.Flattened.ss";
	string inputReliabilityRoot = @"/shares/asimov.prod.data/PublicPartner/Processed/Reliability/RIOD/Streams/";
	string inputDeviceFlattenFolder = @"/DevicesFlattened/";
	string outputStatsStreamName = @"RIOD.DeviceFlatten.Stats";

	// Workflow parameter for all predicted usage unit that can be used
	string inputUsageUnitCols = "InteractivityDurationMS;EngagementDurationMS;FocusDurationMS;OutOfFocusDurationMS;ProcessDurationMS;RunDurationMS;SuspendDurationMS;AudioInMS;AudioOutMS;UserActiveDurationMS";

	// Failure counts
	string inputVerticalToColumn = "appcrash:AppCrashCount;appcrash_ms:AppCrashCount_MS;appcrash_ms_uiv:AppCrashCount_MS_UIV;apphang:AppHangCount;apphang_ms:AppHangCount_MS;apphang_ms_uiv:AppHangCount_MS_UIV;oscrash:OSCrashCount;oscrash_ms:OSCrashCount_MS;criticalservice:CriticalServiceCrashCount;criticalservice_ms:CriticalServiceCrashCount_MS;livekerneldump:LiveKernelDumpCount;dirtyshutdown:DirtyShutdownCount;corruption:CorruptionCount;verifier:VerifierCount;watchdog:WatchdogCount;oom:OOMCount;setup:SetupCount;offlinecrashdump:OfflineCrashDumpCount;abs_bugcheck:ABSBugcheckCount;abs_lpbh:ABSLPBHCount;abs_hw:ABSHWCount;abs_unknown:ABSUnknownCount";
    
	// default branches
	string inputBranches = "ni_release;rs_prerelease";
	string inputOSBuildDefinitionFile = @"/shares/asimov.prod.data/PublicPartner/Processed/Reliability/Resources/UnifiedSchema/UnifiedSchema.OS.Releases.json";
	HashSet<string> branchSet = new HashSet<string>();

    // Check if we are running under XFlow
    if (context != null)
    {
        inputFolder = (string)context.GetParameter<string>("_inputFolder", inputFolder);
		inputPopulationAggStream = (string)context.GetParameter<string>("_inputPopulationAggStream", inputPopulationAggStream);
		inputUsageAggStream = (string)context.GetParameter<string>("_inputUsageAggStream", inputUsageAggStream);
		inputFailureAggStream = (string)context.GetParameter<string>("_inputFailureAggStream", inputFailureAggStream);
		outputFolder = (string)context.GetParameter<string>("_outputFolder", outputFolder);
		outputStreamName = (string)context.GetParameter<string>("_outputStreamName", outputStreamName);
		outputStreamNameWithoutXML = (string)context.GetParameter<string>("_outputStreamNameWithoutXML", outputStreamNameWithoutXML);
	}

	// Reading all valid branches from OS Releases file
	List<Dictionary<string, string>> streamsDefinition = new List<Dictionary<string, string>>();

	if (!string.IsNullOrEmpty(inputOSBuildDefinitionFile))
    {
        string streamsDefinitionContent = ReadTextFromStream(inputOSBuildDefinitionFile);
        streamsDefinition = ParseConfiguration(streamsDefinitionContent);
    }

	for(int i=0; i<streamsDefinition.Count; i++)
    {
		// Adding valid branches to the set
		streamsDefinition[i]["ValidBranches"].Split(';').ToList().ForEach(x => branchSet.Add(x.Trim()));
	}

	// Adding hardcoded user defined branches
	inputBranches.Split(';').ToList().ForEach(x => branchSet.Add(x.Trim()));

#>


#DECLARE expirationStreamCount string = "60";
#DECLARE input_Population_ss string = @"<#=string.Format("{0}/{1}",inputFolder ,inputPopulationAggStream ) #>";
#DECLARE input_Usage_ss string = @"<#=string.Format("{0}/{1}",inputFolder ,inputUsageAggStream ) #>";
#DECLARE input_Failure_ss string = @"<#=string.Format("{0}/{1}",inputFolder ,inputFailureAggStream ) #>";

// Import Next Generation Privacy annotation module 
// Ref: https://microsoft.sharepoint.com/teams/ngphome/ngpx/execution/Official%20Documents/NGPX%20Technical%20Specifications/Privacy%20Tags%20Taxonomy.docx?web=1 
MODULE @"/shares/PXSCosmos15.Prod/PXS.DeleteSignal.PROD/PrivacyAnnotation/PrivacyAnnotation.module"; 
USING Privacy; 

#DECLARE outputStream string = @"<#=string.Format("{0}/{1}",outputFolder ,outputStreamName ) #>";
#DECLARE outputExpandedStream string = @"<#=string.Format("{0}/{1}",outputFolder ,outputStreamNameWithoutXML ) #>";

//Expanded input streams
#DECLARE input_Expanded_Population_ss string = @"<#=string.Format("{0}/{1}",inputFolder ,inputPopulationAggExpandedStream ) #>";
#DECLARE input_Expanded_Usage_ss string = @"<#=string.Format("{0}/{1}",inputFolder ,inputUsageAggExpandedStream ) #>";
#DECLARE input_Expanded_Failure_ss string = @"<#=string.Format("{0}/{1}",inputFolder ,inputFailureAggExpandedStream ) #>";
#DECLARE endDate DateTime = DateTime.Parse("<#=today#>");
#DECLARE dtEndDate DateTime = @endDate;


#DECLARE output_Stats_ss = string.Format("{0}/{2}/{3}"+"_{1:yyyy}-{1:MM}-{1:dd}.ss", 
                                            @"<#=inputReliabilityRoot#>",  
                                            @dtEndDate, 
                                            @"<#=inputDeviceFlattenFolder#>",
                                            @"<#=outputStatsStreamName#>");


populationFailureUsageData = SELECT p.DeviceId,
									p.PopulationJoinKey,
									p.PopulationJoinKeyGuid,
									p.LastSeenEventDate AS Population_LastSeenEventDate,
									p.StartDate AS Population_StartDate,
									p.RunDate AS Population_RunDate,
									p.CustomXML AS Population_CustomFields,
									u.StartDate AS Usage_StartDate,
									u.WatsonLatestDate AS Usage_EndDate,
									u.UsageJoinKey,
									u.UsageJoinGuid,
									u.UsageUnit,
									u.DailyFirstSeenDateTime AS Usage_DailyFirstSeenDateTime,
									u.DailyLastSeenDateTime AS Usage_DailyLastSeenDateTime,
									f.FailureJoinKey,
									f.FailureJoinKeyGuid,
									f.CustomFields AS Failure_CustomFields,
									f.FailureCountsXml
									FROM (SSTREAM @input_Population_ss) AS p
									LEFT OUTER JOIN
									(SSTREAM @input_Usage_ss) AS u
									ON p.PopulationJoinKeyGuid == u.UsageJoinGuid
									LEFT OUTER JOIN
									(SSTREAM @input_Failure_ss) AS f
									ON p.PopulationJoinKeyGuid == f.FailureJoinKeyGuid
							WHERE PopulationJoinKey.Split('.')[1] IN ("<#=string.Join("\",\"",branchSet.ToArray())#>");

populationFailureUsageData = SELECT *,
									getPartitionNumber(PopulationJoinKey,<#=numberOfPartitions#>) AS PartitionNumber
							 FROM populationFailureUsageData;


OUTPUT populationFailureUsageData
TO SSTREAM @outputStream
CLUSTERED BY DeviceId, PopulationJoinKeyGuid,UsageJoinGuid,FailureJoinKeyGuid
SORTED BY DeviceId, PopulationJoinKeyGuid,UsageJoinGuid,FailureJoinKeyGuid
WITH STREAMEXPIRY @expirationStreamCount;

populationFailureUsageExpandedData = SELECT p.*,
											u.UsageJoinKey,
											u.UsageJoinGuid,
											u.DailyFirstSeenDateTime AS Usage_DailyFirstSeenDateTime,
											u.DailyLastSeenDateTime AS Usage_DailyLastSeenDateTime,
											<#
											 for(int k=0;k<inputUsageUnitCols.Split(';').Length;k++)
											 {
											 if(k!= inputUsageUnitCols.Split(';').Length-1)
											 {
											 #>
												u.<#=inputUsageUnitCols.Split(';')[k]#>,
											 <#
											 }
											 else
											 {
											 #>
												u.<#=inputUsageUnitCols.Split(';')[k]#>,
											 <#
											 }
											 }
											 #>
											 f.FailureJoinKey,
											 f.FailureJoinKeyGuid,
											 f.CustomFields AS Failure_CustomFields
											 <#
											 foreach (var inputVerticalToColMap in inputVerticalToColumn.Split(';'))
											 {
													string[] verticalMapStrings = inputVerticalToColMap.Split(':');
													string verticalCountName = verticalMapStrings[0];
											#>
													,
													<#=verticalCountName#>
											<#
														}
											#>
											 FROM (SSTREAM @input_Expanded_Population_ss) AS p
											 LEFT OUTER JOIN
											 (SSTREAM @input_Expanded_Usage_ss) AS u
											 ON p.PopulationJoinKeyGuid == u.UsageJoinGuid
											 LEFT OUTER JOIN
											 (SSTREAM @input_Expanded_Failure_ss) AS f
											 ON p.PopulationJoinKeyGuid == f.FailureJoinKeyGuid
									WHERE PopulationJoinKey.Split('.')[1] IN ("<#=string.Join("\",\"",branchSet.ToArray())#>");

populationFailureUsageExpandedData = SELECT *,
											getPartitionNumber(PopulationJoinKey,<#=numberOfPartitions#>) AS PartitionNumber
											FROM populationFailureUsageExpandedData;

// Historical stats
stats = SELECT COUNT(*) AS totalRows,
			   COUNT(DISTINCT DeviceId) AS totalDevices,
			   COUNTIF(InteractivityDurationMS >= 1800000) AS devicesWithMinUsage,
			   COUNTIF(InteractivityDurationMS>0) AS devicesWithUsage,
			   OSBuildNumber,
			   OSBuildRevision
		FROM populationFailureUsageExpandedData
		GROUP BY OSBuildNumber,OSBuildRevision;

OUTPUT stats
TO SSTREAM @output_Stats_ss
WITH STREAMEXPIRY @expirationStreamCount;

OUTPUT populationFailureUsageExpandedData
TO SSTREAM @outputExpandedStream
CLUSTERED BY DeviceId, PopulationJoinKeyGuid,UsageJoinGuid,FailureJoinKeyGuid
SORTED BY DeviceId, PopulationJoinKeyGuid,UsageJoinGuid,FailureJoinKeyGuid
WITH STREAMEXPIRY @expirationStreamCount;

#CS

int getPartitionNumber(String key,int mod)
{
	int keyHash = key.GetHashCode() & 0xfffffff;
	int partitionNum = keyHash%mod;
	return partitionNum;
}

#ENDCS